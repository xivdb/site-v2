var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var content = {
    cid: null,
    uid: null,
    account: null,

    $block: '.content-block',

    init: function init() {
        content.account = SID;

        content.elements();
        content.comments.get();
        content.screenshots.init();
        content.screenshots.get();
    },

    // setup elements
    elements: function elements() {
        content.$block = $(content.$block);
        content.comments.$comments = $(content.comments.$comments);
        content.comments.$input = $(content.comments.$input);
        content.comments.$errors = $(content.comments.$errors);
        content.comments.$nocomments = $(content.comments.$nocomments);

        content.screenshots.$dropzone = $(content.screenshots.$dropzone);
        content.screenshots.$noscreenshots = $(content.screenshots.$noscreenshots);
        content.screenshots.$screenshots = $(content.screenshots.$screenshots);

        // set some ids
        content.cid = parseInt(content.$block.attr('data-contentid'));
        content.uid = parseInt(content.$block.attr('data-id'));

        // on click of tab nav
        $('.site').on('click', '.tab-nav span', function () {
            $('.tab-nav span.active').removeClass('active');
            $(this).addClass('active');

            var tab = $(this).attr('data-tab');
            if (!tab) {
                return;
            }

            $('.tab-block.active').removeClass('active');
            $('#tab-block-' + tab).addClass('active');

            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.get();
            }
        });

        // submit comment
        $('.site').on('click', '.comment-submit', function () {
            var message = content.comments.$input.val().trim();
            content.comments.post(message);
        });

        // reply click
        $('.site').on('click', '.reply-button', function () {
            var id = $(this).attr('data-id');
            content.comments.reply(id);
        });

        // reply submit
        $('.site').on('click', '.reply-submit', function () {
            var $reply = $('.ui-comment-reply').find('.comment-reply'),
                message = $reply.val().trim(),
                reply = $reply.attr('data-reply');

            content.comments.post(message, reply);
        });

        // minimize
        $('.site').on('click', '.toggle-comment', function () {
            var id = $(this).attr('data-id'),
                visible = parseInt($(this).attr('data-visible')),
                $parent = $('#ui-comment-' + id);

            if (visible) {
                $(this).attr('data-visible', 0);
                $(this).removeClass('fa-minus-square').addClass('fa-plus-square');
                $parent.find('.comment_detail').eq(0).hide();
                $parent.find('.vote_box').eq(0).hide();
                $parent.find('.comment_minimized').eq(0).show();
            } else {
                $(this).attr('data-visible', 1);
                $(this).removeClass('fa-plus-square').addClass('fa-minus-square');
                $parent.find('.comment_detail').eq(0).show();
                $parent.find('.vote_box').eq(0).show();
                $parent.find('.comment_minimized').eq(0).hide();
            }
        });

        // edit post
        $('.site').on('click', '.edit-button', function () {
            var id = $(this).attr('data-id');

            $comment = $('#ui-comment-' + id);
            $comment.find('.text').eq(0).hide();
            $comment.find('.comment-edit').eq(0).show();
            $comment.find('.stop-edit-button').eq(0).show();
            $(this).hide();

            $textarea = $comment.find('.comment-edit').eq(0).find('textarea');
            autosize($textarea);
        });

        // stop edit post
        $('.site').on('click', '.stop-edit-button', function () {
            var id = $(this).attr('data-id'),
                $comment = $('#ui-comment-' + id);

            $comment.find('.text').eq(0).show();
            $comment.find('.comment-edit').eq(0).hide();
            $comment.find('.edit-button').eq(0).show();
            $(this).hide();
        });

        // save button
        $('.site').on('click', '.save-button', function () {
            var id = $(this).attr('data-id');
            $comment = $('#ui-comment-' + id);

            $(this).disable('Please wait ...');

            var message = $comment.find('.comment-edit textarea').val().trim();
            content.comments.save(message, id);
        });

        // delete button
        $('.site').on('click', '.delete-button', function (e) {
            if (!window.confirm('Are you sure you want to delete this comment?')) {
                e.preventDefault();
                return;
            }

            var id = $(this).attr('data-id');
            $(this).disable('Please wait ...');
            content.comments['delete'](id);
        });

        // delete screenshot
        $('.site').on('click', '.screenshot-delete', function (e) {
            if (!window.confirm('Are you sure you want to delete this screenshot?')) {
                e.preventDefault();
                return;
            }

            var id = $(this).attr('data-id');
            $(this).disable('Please wait ...');
            content.screenshots['delete'](id);
        });
    },

    // comments stuff
    comments: {
        maxIndentation: 4,
        $comments: '.ui-comments',
        $input: '.comment-input',
        $errors: '.comment-errors',
        $nocomments: '.no-comments',

        error: function error(text) {
            content.comments.$errors.html('<div class="alert alert-error"><h5>Oops!</h5>' + text + '</div>').show();
        },

        // get comments
        get: function get() {
            content.comments.$errors.hide();

            // ajax results
            $.ajax({
                url: content.urls.get('comments'),
                cache: false,
                success: function success(data) {
                    if (typeof data === 'object') {
                        content.comments.render(data);
                        return;
                    }

                    console.error('Comments data invalid');
                },
                error: function error(data, status, _error) {
                    console.error(data, status, _error);
                },
                complete: function complete() {
                    ttdrop();
                }
            });
        },

        // post a comment
        post: function post(message, reply) {
            content.comments.$errors.hide();

            // check length
            if (message && message.length > 2 && message.length < 2000) {
                $.ajax({
                    url: content.urls.get('commentsPost'),
                    method: 'POST',
                    data: {
                        uid: content.uid,
                        cid: content.cid,
                        message: message,
                        reply: reply
                    },
                    success: function success(data) {
                        if (data) {
                            content.comments.$input.val('');
                            content.comments.get();
                            return;
                        }

                        content.comments.$errors.append(data[1]);
                    },
                    error: function error(data, status, _error2) {
                        content.comments.error('There was an error! Please try again');
                        console.log(data.responseText);
                        console.error(data.responseText, status, _error2);
                    },
                    complete: function complete() {}
                });
            }
        },

        save: function save(message, id) {
            content.comments.$errors.hide();

            if (id && message && message.length > 2 && message.length < 2000) {
                $.ajax({
                    url: content.urls.get('commentsUpdate'),
                    method: 'POST',
                    data: {
                        uid: content.uid,
                        cid: content.cid,
                        message: message,
                        postId: id
                    },
                    success: function success(data) {
                        if (data[0]) {
                            content.comments.$input.val('');
                            content.comments.get();
                            return;
                        }

                        content.comments.$errors.append(data[1]);
                    },
                    error: function error(data, status, _error3) {
                        content.comments.error('There was an error! Please try again');
                        console.log(data.responseText);
                        console.error(data.responseText, status, _error3);
                    },
                    complete: function complete() {}
                });
            }
        },

        'delete': function _delete(id) {
            content.comments.$errors.hide();

            if (id) {
                $.ajax({
                    url: content.urls.get('commentsDelete'),
                    method: 'POST',
                    data: {
                        uid: content.uid,
                        cid: content.cid,
                        postId: id
                    },
                    success: function success(data) {
                        if (data[0]) {
                            content.comments.get();
                            return;
                        }

                        content.comments.$errors.append(data[1]);
                    },
                    error: function error(data, status, _error4) {
                        content.comments.error('There was an error! Please try again');
                        console.log(data.responseText);
                        console.error(data.responseText, status, _error4);
                    },
                    complete: function complete() {}
                });
            }
        },

        // reply to a comment
        reply: function reply(id) {
            // remove existing reply boxes
            $('.ui-comment-reply').remove();

            // get element for comment
            var $element = $('#ui-comment-' + id);

            // find reply box
            $replyto = $element.find('.replyto').eq(0);

            // show reply to and inject reply comment form
            $replyto.show().html(_render('#ui-comment-reply', { id: id }));

            // trigger auto resize on the new textarea
            autosize($('.ui-comment-reply').find('textarea'));
        },

        // render comments
        render: function render(data) {
            // empty comments
            content.comments.$nocomments.hide();
            content.comments.$comments.empty().html('');

            // if length
            if (data.length > 0) {
                content.comments.renderRecurrsion(data, content.comments.$comments, 0);
            } else {
                content.comments.$nocomments.show();
            }

            // remove empty replies
            content.comments.$comments.find('.replies').each(function () {
                if ($(this).html().length == 0) {
                    $(this).remove();
                }
            });

            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.get();
            }
        },

        renderRecurrsion: function renderRecurrsion(data, $element, level) {
            level++;

            if (level > content.comments.maxIndentation) {
                return;
            }

            for (var i in data) {
                var comment = data[i];

                // fix time to a moment time
                comment.time = moment(comment.time).fromNow();

                // fix edited to a edited time
                if (comment.edited == '0000-00-00 00:00:00') {
                    comment.edited = null;
                }

                if (comment.edited) {
                    comment.edited = moment(comment.edited).fromNow();
                }

                // of no character
                if (!comment.character_avatar) {
                    comment.character_avatar = '/img/ui/noavatar_light.png';
                }

                // vote bools for mustache
                comment.voted_yes = comment.vote_score == 1 ? true : false;
                comment.voted_no = comment.vote_score == -1 ? true : false;

                // is author
                comment.is_author = false;
                if (content.account == comment.member) {
                    comment.is_author = true;
                }

                // level of indentation
                comment.level = level;

                // if can reply or not
                comment.can_reply = true;
                if (level > content.comments.maxIndentation - 1) {
                    comment.can_reply = false;
                }

                // if has replies or not
                comment.has_replies = false;
                var replySize = Object.size(comment.replies);
                if (replySize > 0) {
                    comment.has_replies = true;
                }

                // points class
                comment.points_class = 'light';
                if (comment.points > 0) {
                    comment.points_class = 'green';
                } else if (comment.points < 0) {
                    comment.points_class = 'red';
                }

                // is online or not
                comment.is_online = false;
                if (content.account) {
                    comment.is_online = true;
                }

                //console.log(comment);

                // append comment
                $element.append(_render('#ui-comment', comment));

                // if replies
                if (replySize > 0) {
                    var $reply = $('#ui-comment-' + comment.id + ' .replies');
                    content.comments.renderRecurrsion(comment.replies, $reply, level);
                }
            }
        }
    },

    // screenshot stuff
    screenshots: {
        $dropzone: '.screenshot-form',
        $noscreenshots: '.no-screenshots',
        $screenshots: '.screenshots',

        maxSize: 10000,
        uploading: false,
        responded: false,

        error: function error(text) {
            content.screenshots.$dropzone.html('<h5>Oops!</h5><p>' + text + '</p>').addClass('fail').css({ 'background-image': 'none' });
        },

        setDefaultDisplay: function setDefaultDisplay() {
            content.screenshots.$dropzone.removeClass('active uploading fail');
            content.screenshots.$dropzone.css({ 'background-image': 'none' });
            content.screenshots.$dropzone.html('<span class="blue">Upload Screenshot</span>');
            content.screenshots.$dropzone.append('<div class="fs16 mt10">Drag an image onto this block to upload</div>');
        },

        addProgressBar: function addProgressBar() {
            content.screenshots.$dropzone.append('<div class="progress"><span class="inner thick blue" style="width:0%"></span></div>');
        },

        get: function get() {
            // ajax results
            $.ajax({
                url: content.urls.get('screenshots'),
                cache: false,
                success: function success(data) {
                    if (typeof data === 'object') {
                        content.screenshots.render(data);
                        return;
                    }

                    console.error('Screenshots data invalid');
                },
                error: function error(data, status, _error5) {
                    console.error(data, status, _error5);
                },
                complete: function complete() {
                    ttdrop();
                    AppContentScreenshots.checkForLightbox();
                }
            });
        },

        render: function render(data) {
            content.screenshots.$screenshots.empty().html('');

            if (data.length > 0) {
                content.screenshots.$noscreenshots.hide();
                var $element = content.screenshots.$screenshots;

                for (var i in data) {
                    var image = data[i];

                    // fix time to a moment time
                    image.time = moment(image.time).fromNow();

                    // is author
                    image.is_author = false;
                    if (content.account == image.member) {
                        image.is_author = true;
                    }

                    $element.append(_render('#ui-image', image));
                }
            } else {
                content.screenshots.$noscreenshots.show();
            }

            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.get();
            }
        },

        'delete': function _delete(id) {
            if (id) {
                $.ajax({
                    url: content.urls.get('screenshotsDelete'),
                    method: 'POST',
                    data: {
                        uid: content.uid,
                        cid: content.cid,
                        screenshotId: id
                    },
                    success: function success(data) {
                        if (data[0]) {
                            content.screenshots.get();
                            return;
                        }

                        console.log(data);
                    },
                    error: function error(data, status, _error6) {
                        content.comments.error('There was an error! Please try again');
                        console.log(data.responseText);
                        console.error(data.responseText, status, _error6);
                    },
                    complete: function complete() {}
                });
            }
        },

        init: function init() {
            var dropzone = document.getElementById('screenshot-form');

            content.screenshots.$dropzone.on('dragenter', content.screenshots.dragenter);
            content.screenshots.$dropzone.on('dragover', content.screenshots.dragover);
            content.screenshots.$dropzone.on('dragleave', content.screenshots.dragleave);
            content.screenshots.$dropzone.on('drop dragdrop', content.screenshots.drop);
        },

        dragenter: function dragenter(e) {
            // prevent things
            e.stopPropagation();
            e.preventDefault();
        },

        dragover: function dragover(e) {
            // prevent things
            e.stopPropagation();
            e.preventDefault();

            content.screenshots.$dropzone.addClass('active').removeClass('fail');
        },

        dragleave: function dragleave(e) {
            // remove active
            content.screenshots.$dropzone.removeClass('active uploading fail');
        },

        drop: function drop(e) {
            if (content.screenshots.uploading) {
                return;
            }

            // prevent things
            e.stopPropagation();
            e.preventDefault();

            content.screenshots.$dropzone.removeClass('active fail');
            content.screenshots.$dropzone.addClass('uploading');

            var dt = e.dataTransfer || e.originalEvent && e.originalEvent.dataTransfer;
            var files = e.target.files || dt && dt.files;
            var file = null;

            if (files) {
                file = files[0];
                content.screenshots.upload(file);
            } else {
                content.screenshots.error('Could not detect files, try again or contact support');
            }
        },

        upload: function upload(file) {
            content.screenshots.responded = false;
            content.screenshots.uploading = true;
            content.screenshots.$dropzone.html('<span class="upload-status">Uploading ...</span>');

            // some data stuff
            var name = file.name,
                size = file.size,
                type = file.type,
                sizeInKb = size / 1024,
                sizeInMb = (sizeInKb / 1024).toFixed(2),
                maxSizeInMb = (content.screenshots.maxSize / 1024).toFixed(2);

            // check size
            if (sizeInMb > maxSizeInMb) {
                content.screenshots.error('File size is too big <span class="red">(' + sizeInMb + ')</span>, keep below: <span class="yellow">' + maxSizeInMb + '</span> MB!');
            }
            // check type
            else if (!type.match('image.*')) {
                    content.screenshots.error('The file dropped was not an image, drop only: <span class="yellow">PNG, JPG or GIF</span>');
                }
                // ok
                else {
                        // Open a reader
                        var reader = new FileReader();
                        reader.onload = (function (temp) {
                            return function (e) {
                                var img = new Image();
                                img.onload = function () {

                                    // Set Image Data
                                    var data = e.target.result;

                                    // Set preview
                                    $('.screenshot-form').css({ 'background-image': 'url(' + data + ')' });

                                    // Setup new form
                                    var upload = new FormData();
                                    upload.append("uid", content.uid);
                                    upload.append("cid", content.cid);
                                    upload.append("name", name);
                                    upload.append("type", type);
                                    upload.append("size", size);
                                    upload.append("data", data);

                                    // Get an XMLHttpRequest instance
                                    var xhr = new XMLHttpRequest();

                                    // Attach event listeners to the xhr
                                    xhr.upload.addEventListener('loadstart', content.screenshots.uploadStart, false);
                                    xhr.upload.addEventListener('progress', content.screenshots.uploadProgress, false);
                                    xhr.upload.addEventListener('load', content.screenshots.uploadComplete, false);
                                    xhr.addEventListener('readystatechange', content.screenshots.uploadResponse, false);

                                    // Open post request
                                    xhr.open("POST", content.urls.get('screenshotsUpload'), true);
                                    xhr.send(upload);
                                };

                                // Checking image resolution
                                img.src = e.target.result;
                            };
                        })(file);

                        // Read in the image file as a data URL.
                        reader.readAsDataURL(file);
                    }
        },

        // an upload starts
        uploadStart: function uploadStart(e) {
            // add progress bar
            content.screenshots.addProgressBar();
        },

        // upload progress response
        uploadProgress: function uploadProgress(e) {
            var percent = e.loaded / e.total * 100;
            content.screenshots.$dropzone.find('.progress span').width(percent + '%');
        },

        // upload complete
        uploadComplete: function uploadComplete(e) {
            content.screenshots.$dropzone.find('.upload-status').html('Uploaded! - Saving ...');
            content.screenshots.$dropzone.find('.progress span').removeClass('blue').addClass('green');
            content.screenshots.uploading = false;

            setTimeout(function () {
                content.screenshots.$dropzone.find('.upload-status').html('Compressing image ...');
            }, 3000);

            setTimeout(function () {
                content.screenshots.$dropzone.find('.upload-status').html('Making smaller versions ...');
            }, 6000);

            setTimeout(function () {
                content.screenshots.$dropzone.find('.upload-status').html('Cleaning up! Almost done!');
            }, 9000);
        },

        // upload response
        uploadResponse: function uploadResponse(e) {
            if (content.screenshots.responded) {
                return;
            }

            // get status
            var status = null;
            try {
                status = e.target.status;
            } catch (e) {
                return;
            }

            // check status
            if (status == 200 && e.target.responseText) {
                content.screenshots.responded = true;
                var response = e.target.responseText;

                // try parse json response
                try {
                    var response = JSON.parse(response);

                    // respond
                    if (response[0]) {
                        content.screenshots.setDefaultDisplay();
                        content.screenshots.get();
                    } else {
                        content.screenshots.error(response[1]);
                    }
                } catch (e) {
                    console.error(response);
                    content.screenshots.error('There was an unknown error uploading, please contact support.');
                }
            }
        }
    },

    // urls
    urls: {
        list: {
            comments: '/comments/get/{cid}/{uid}',
            commentsUpdate: '/comments/update',
            commentsDelete: '/comments/delete',
            commentsPost: '/comments/post',

            screenshots: '/screenshots/get/{cid}/{uid}',
            screenshotsUpload: '/screenshots/upload',
            screenshotsDelete: '/screenshots/delete'
        },

        get: function get(type, message) {
            var url = content.urls.list[type];

            url = url.replace('{cid}', content.cid);
            url = url.replace('{uid}', content.uid);

            return url;
        }
    }
};

var app = {
    init: function init() {
        // auto size all textareas (except on mobile, too laggy)
        if (!isOnMobile() && $('textarea').length > 0) {
            autosize($('textarea'));
        }

        app.menu();
        app.dropdowns();
        app.subdropdowns();

        // toggle history box
        $('.history').on('mouseenter', function () {
            $('.history-box').show();
        }).on('mouseleave', function () {
            $('.history-box').hide();
        });

        app.misc();
        app.profileTabs();

        $('.btn-menu-mobile').on('click', function () {
            $('.user-bar').toggle();
        });

        // Whenever one ofthe buttons on a table is clicked
        $('html .table-pager .btn').on('click', function () {
            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.get();
            }
        });
    },

    enforceNumbers: function enforceNumbers() {
        $('html').on('keyup', 'input[type="number"]', function (event) {
            var maxlength = $(this).attr('maxlength'),
                inputValue = $(this).val().substring(0, maxlength);

            $(this).val(inputValue);
        });
    },

    menu: function menu() {
        var timer = null;
        $('.menu > span').on('mouseenter', function () {
            var _this = this;
            timer = setTimeout(function () {
                $(_this).find('> .dropdown-container').show();
            }, 200);
        }).on('mouseleave', function () {
            clearTimeout(timer);
            $(this).find('> .dropdown-container').hide();
        });
    },

    dropdowns: function dropdowns() {
        $('.dropdown-menu').menuAim({
            activate: function activate(row) {
                $('.dropdown-active').removeClass('dropdown-active');
                $(row).addClass('hover');
                $('#' + $(row).attr('data-submenu')).addClass('dropdown-active');
            },
            deactivate: function deactivate(row) {
                $(row).removeClass('hover');
                $('#' + $(row).attr('data-submenu')).removeClass('dropdown-active');
            }
        });
    },

    subdropdowns: function subdropdowns() {
        $('.dropdown-menu span').on('click', function () {
            var $node = $(this),
                $parent = $node.parents('.subdropdown-container'),
                id = $node.attr('data-submenu');

            $parent.find('.active').removeClass('active');
            $node.addClass('active');
            $('#sub-' + id).addClass('active');
        });
    },

    // misc stuff
    misc: function misc() {
        $('html').on('click', '.lang-close', function () {
            $('.language-selection').hide();
        });

        $('html').on('click', '.language-button', function () {
            $('.language-selection').show();
        });
    },

    // show loading or not
    loading: function loading(show) {
        var $loading = $('.loading');

        if (show) {
            $loading.fadeIn(100);
            return;
        }

        $loading.fadeOut(100);
    },

    profileTabs: function profileTabs() {}
};

// run ini on ready
$(function () {
    app.init();
    Search.init();

    // unveil
    $('img').unveil();

    // temp analytic checking
    $.ajax({
        url: 'https://staging.xivapi.com/debug/xivdb',
        data: {
            route: window.location.pathname.trim().toLowerCase()
        }
    });
});

/**
 * Get parameters by name
 *
 * @param name
 * @param url
 * @returns {*}
 */
function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);

    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

//
//
//  OLD
//
//

// clones an object to remove pointer issues
function clone(obj) {
    return $.extend({}, obj);
}

// render using mustache
function _render(id, data) {
    var source = $(id).html();
    if (typeof source === 'undefined') {
        console.error('Template undefined, sort it!', id);
        return;
    }

    // compile template
    var template = Handlebars.compile(source);

    // generate html
    var html = template(data);

    return html;
}

// random number
function random(min, max) {
    return Math.floor(Math.random() * max + min);
}

// disable a field with some text
$.fn.disable = function (text) {
    this.attr('disabled', 'disabled');

    if (text) {
        this.html(text);
    }

    return this;
};

// disable a field with loading
$.fn.loading = function (stop) {
    if (stop) {
        this.attr('disabled', null);
        this.html(this.attr('data-text'));
        return this;
    }
    this.attr('disabled', 'disabled');
    this.attr('data-text', this.text());
    this.html('<i class="fa fa-refresh fa-spin"></i>');

    return this;
};

// enable a field with some text
$.fn.enable = function (text) {
    this.attr('disabled', null);

    if (text) {
        this.html(text);
    }

    return this;
};

// make something flash
$.fn.flash = function () {
    this.fadeOut(100).fadeIn(200).fadeOut(100).fadeIn(200);
};

// get the size of an object
Object.size = function (obj) {
    var size = 0,
        key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

// convert object to array
Object.toArray = function (obj) {
    return $.map(obj, function (value, index) {
        return [value];
    });
};

Object.getLastKey = function (obj) {
    return Object.keys(obj)[Object.keys(obj).length - 1];
};

// number format (like php)
function number_format(number, decimals, dec_point, thousands_sep) {
    //  discuss at: http://phpjs.org/functions/number_format/
    number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
    var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,
        dec = typeof dec_point === 'undefined' ? '.' : dec_point,
        s = '',
        toFixedFix = function toFixedFix(n, prec) {
        var k = Math.pow(10, prec);
        return '' + (Math.round(n * k) / k).toFixed(prec);
    };
    // Fix for IE parseFloat(0.55).toFixed(0) = 0;
    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    }
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
    }
    return s.join(dec);
}

// ucwords (like php)
function ucwords(str) {
    //  discuss at: http://phpjs.org/functions/ucwords/

    return (str + '').replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g, function ($1) {
        return $1.toUpperCase();
    });
}

// ksort (like php)
function ksort(inputArr, sort_flags) {
    //  discuss at: http://phpjs.org/functions/ksort/

    var tmp_arr = {},
        keys = [],
        sorter,
        i,
        k,
        that = this,
        strictForIn = false,
        populateArr = {};

    switch (sort_flags) {
        case 'SORT_STRING':
            // compare items as strings
            sorter = function (a, b) {
                return that.strnatcmp(a, b);
            };
            break;
        case 'SORT_LOCALE_STRING':
            // compare items as strings, original by the current locale (set with  i18n_loc_set_default() as of PHP6)
            var loc = this.i18n_loc_get_default();
            sorter = this.php_js.i18nLocales[loc].sorting;
            break;
        case 'SORT_NUMERIC':
            // compare items numerically
            sorter = function (a, b) {
                return a + 0 - (b + 0);
            };
            break;
        // case 'SORT_REGULAR': // compare items normally (don't change types)
        default:
            sorter = function (a, b) {
                var aFloat = parseFloat(a),
                    bFloat = parseFloat(b),
                    aNumeric = aFloat + '' === a,
                    bNumeric = bFloat + '' === b;
                if (aNumeric && bNumeric) {
                    return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0;
                } else if (aNumeric && !bNumeric) {
                    return 1;
                } else if (!aNumeric && bNumeric) {
                    return -1;
                }
                return a > b ? 1 : a < b ? -1 : 0;
            };
            break;
    }

    // Make a list of key names
    for (k in inputArr) {
        if (inputArr.hasOwnProperty(k)) {
            keys.push(k);
        }
    }
    keys.sort(sorter);

    // BEGIN REDUNDANT
    this.php_js = this.php_js || {};
    this.php_js.ini = this.php_js.ini || {};
    // END REDUNDANT
    strictForIn = this.php_js.ini['phpjs.strictForIn'] && this.php_js.ini['phpjs.strictForIn'].local_value && this.php_js.ini['phpjs.strictForIn'].local_value !== 'off';
    populateArr = strictForIn ? inputArr : populateArr;

    // Rebuild array with sorted key names
    for (i = 0; i < keys.length; i++) {
        k = keys[i];
        tmp_arr[k] = inputArr[k];
        if (strictForIn) {
            delete inputArr[k];
        }
    }
    for (i in tmp_arr) {
        if (tmp_arr.hasOwnProperty(i)) {
            populateArr[i] = tmp_arr[i];
        }
    }

    return strictForIn || populateArr;
}

navigator.sayswho = (function () {
    var ua = navigator.userAgent,
        tem,
        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\bOPR\/(\d+)/);
        if (tem != null) return 'Opera ' + tem[1];
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
    return M.join(' ');
})();

function sortIt(object) {
    var sortable = [];
    for (var key in object) {
        sortable.push([key, object[key]]);
    }

    sortable.sort(function (a, b) {
        return b[1] - a[1];
    });

    return sortable;
}

function generateRandomHash(length) {
    length = length ? length : 32;

    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for (var i = 0; i < length; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

function dateFromDay(year, day) {
    var date = new Date(year, 0); // initialize a date in `year-01-01`
    return new Date(date.setDate(day)); // add the number of days
}

// prevent alerts
(function (proxied) {
    window.alert = function () {
        console.log('An alert was attempted and blocked');
    };
})(window.alert);

//
// Account
//

var AppAccountClass = (function () {
    function AppAccountClass() {
        var _this2 = this;

        _classCallCheck(this, AppAccountClass);

        this.search = 'https://xivsync.com/character/search';
        this.character = '/account/characters/verify/{id}';

        //
        // Click to show form
        //
        $('.acc-char-add').on('click', function (event) {
            $('.acc-char-add').slideUp(150);
            $('.acc-char-add-form').slideDown(150);
        });

        //
        // Click even for the search form
        //
        $('.acc-char-add-form').on('click', '.form button', function (event) {
            $(event.target).loading();
            _this2.setWaitingMessage(languages.custom(981));

            var data = {
                server: $('#character-server').val().trim()
            };

            if (name = $('#character-name').val().trim()) {
                data.name = name;
            }

            $.ajax({
                url: _this2.search,
                cache: false,
                data: data,
                success: function success(data) {

                    $(event.target).loading(true);
                    _this2.setWaitingMessage(false);

                    // show response
                    $('.acc-char-add-response').show();

                    // Get element
                    var $ele = $('.acc-char-add-response .acc-char-add-list');
                    $ele.html('');

                    // append faces
                    for (var i in data.data.results) {
                        var character = data.data.results[i];
                        $ele.append('<button class="acc-char-add-btn" data-id="' + character.id + '">\n                            <img src="' + character.avatar + '" width="32" height="32">\n                            <div>' + character.name + '</div>\n                        </button>');
                    }
                },
                error: function error(data, status, code) {
                    $(event.target).loading(true);
                    _this2.setWaitingMessage(languages.custom(982));
                    console.log(data, status, code);
                }
            });
        });

        //
        // Click event for the character
        //
        $('.acc-char-add-form').on('click', '.acc-char-add-response button', function (event) {
            var id = $(event.currentTarget).attr('data-id'),
                url = _this2.character.replace('{id}', id);

            _this2.setWaitingMessage(languages.custom(983));

            $.ajax({
                url: url,
                cache: false,
                success: function success(data) {
                    if (data[0]) {
                        $('.acc-char-add-response').hide();
                        _this2.setWaitingMessage(languages.custom(984), 'fa fa-check-circle-o fa-2x');
                        return;
                    }

                    _this2.setWaitingMessage(data[1], 'fa fa-exclamation-triangle fa-2x');
                },
                error: function error(data, status, code) {
                    _this2.setWaitingMessage(languages.custom(985));
                    console.log(data, status, code);
                }
            });
        });

        //
        // Change background selection
        //
        $('#site_background').on('change', function (event) {
            $('.acc-bg-preview').attr('data-preview', $(event.currentTarget).val());
        });
        $('.acc-bg-preview').attr('data-preview', $('#site_background').val());
    }

    //
    // Set the waiting message
    //

    _createClass(AppAccountClass, [{
        key: 'setWaitingMessage',
        value: function setWaitingMessage(msg, icon) {
            if (!msg) {
                $('.acc-ajax-waiting').hide();
                return;
            }

            $('.acc-ajax-waiting').show().find('> div').html(msg);

            // if to change icon
            $('.acc-ajax-waiting i').attr('class', 'fa fa-refresh fa-spin fa-2x');
            if (icon) {
                $('.acc-ajax-waiting i').attr('class', icon);
            }
        }
    }]);

    return AppAccountClass;
})();

$(function () {
    var AppAccount = new AppAccountClass();
});

//
// Home functionality
//

var AppContentScreenshotsClass = (function () {
    function AppContentScreenshotsClass() {
        _classCallCheck(this, AppContentScreenshotsClass);
    }

    _createClass(AppContentScreenshotsClass, [{
        key: 'checkForLightbox',

        //
        // Check for lightbox request in the url
        //
        value: function checkForLightbox() {
            // get hash
            var hash = window.location.hash;

            // check for lightbox hash
            if (hash.indexOf('#lb=') > -1) {
                var imageId = hash.replace('#lb=', '');

                // if ID
                if (imageId) {
                    // switch to screenshots tab
                    $('.tab-nav span[data-tab="screenshots"]').trigger('click');

                    // image url
                    var imageUrl = $('img[data-img-id="' + imageId + '"]').attr('src');
                    if (imageUrl) {
                        imageUrl = imageUrl.replace('small_', '');

                        $('.lightbox a').attr('href', imageUrl);
                        $('.lightbox .lightbox-image').html('<img src="' + imageUrl + '">');
                        $('.lightbox').show();
                    }
                }
            }

            // watch on others
            $('.screenshots a').on('click', function (event) {
                event.preventDefault();

                var $image = $(this).find('img[data-img-id]');
                imageUrl = $image.attr('src'), imageUrl = imageUrl.replace('small_', ''), $('.lightbox a').attr('href', imageUrl);
                $('.lightbox .lightbox-image').html('<img src="' + imageUrl + '">');
                $('.lightbox').show();
            });

            // close lightbox
            $(document).keyup(function (e) {
                if (e.keyCode == 27) {
                    $('.lightbox').hide();
                }
            });
        }
    }]);

    return AppContentScreenshotsClass;
})();

var AppContentScreenshots = new AppContentScreenshotsClass();

var feedback = {
    adb: false,
    viewing: 0,
    data: {},

    open: function open(title) {
        feedback.populate();

        $('.feedback-form').show();

        if (title) {
            $('#feedback-title').val($('<textarea />').html(title).text());
            $('#feedback-section').val('Content');
        }
    },

    close: function close() {
        $('.feedback-form').hide();
        $('.feedback-submit').enable('Submit Report');
    },

    reset: function reset() {
        $('#feedback-title').val('');
        $('#feedback-message').val('');
        $('#feedback-category').val('Feedback');
        $('#feedback-section').val('General');
    },

    populate: function populate() {
        feedback.data.res_width = $(window).width();
        feedback.data.res_height = $(window).height();
        feedback.data.browser = navigator.sayswho;
    },

    post: function post() {
        $('.feedback-submit').disable('Submitting!');

        var data = {
            url: location.href,
            section: $('#feedback-section').val(),
            category: $('#feedback-category').val(),
            title: $('#feedback-title').val().trim(),
            message: $('#feedback-message').val().trim(),
            info: feedback.data
        };

        $.ajax({
            url: '/feedback/submit',
            data: data,
            method: 'POST',
            success: function success(data) {
                $('.feedback-submit').enable('Submit Report');
                $('.feedback-submit-return').html(_render('#ui-feedback-ok', {
                    id: data
                }));
            },
            error: function error(data, status, code) {
                console.error(data);
                console.error(status, code);
            }
        });
    },

    reply: function reply() {
        $('.feedback-reply-button').disable('<i class="fa fa-circle-o-notch fa-spin fa-fw"></i>');

        if ($('.feedback-reply-textarea').val().length < 1) {
            // too short
        } else {
                $.ajax({
                    url: '/feedback/reply',
                    data: {
                        fid: feedback.viewing,
                        message: $('.feedback-reply-textarea').val().trim()
                    },
                    method: 'POST',
                    success: function success(response) {
                        if (response || response == 'true') {
                            location.reload();
                            return;
                        }

                        $('.feedback-panel').after('<div class="error">Could not post reply, try again later!</div>');
                        console.error(response);
                    },
                    error: function error(data, status, code) {
                        console.error(data);
                        console.error(status, code);
                    }
                });
            }
    }
};

//
// Home functionality
//

var AppHomeClass = (function () {
    function AppHomeClass() {
        _classCallCheck(this, AppHomeClass);

        this.bannerValue = 1;
        this.bannerSize = 1;
        this.bannerTimeout = null;
    }

    //
    // initBanners
    //

    _createClass(AppHomeClass, [{
        key: 'initBanners',
        value: function initBanners(size) {
            var _this3 = this;

            var $container = $('.home-banners'),
                $active = $container.find('a.active'),
                $next = $active.next(),
                number = $active.attr('data-banner');

            // if number is same as size, reset
            if (number == size) {
                $next = $container.find('a[data-banner="1"]');
            }

            this.bannerSize = parseInt(size);
            this.bannerValue = parseInt(number);

            $container.find('.controls span em').text(this.bannerValue);

            // timer
            this.bannerTimeout = setTimeout(function () {
                $active.removeClass('active');
                $next.addClass('active');
                _this3.initBanners(size);
            }, 4000);
        }

        //
        // Go to the next banner
        //
    }, {
        key: 'nextBanner',
        value: function nextBanner() {
            // clear timeout
            clearTimeout(this.bannerTimeout);

            // get next value
            var number = parseInt(this.bannerValue) + 1;
            if (number > this.bannerSize) {
                number = 1;
            }

            // get next one
            $element = $('.home-banners').find('a[data-banner="' + number + '"]');
            $active = $('.home-banners a.active');

            // switch it out
            $active.removeClass('active');
            $element.addClass('active');

            this.initBanners(this.bannerSize);
        }

        //
        // Go to the previous banner
        //
    }, {
        key: 'prevBanner',
        value: function prevBanner() {
            // clear timeout
            clearTimeout(this.bannerTimeout);

            // get next value
            var number = parseInt(this.bannerValue) - 1;
            if (number < 1) {
                number = parseInt(this.bannerSize);
            }

            // get next one
            $element = $('.home-banners').find('a[data-banner="' + number + '"]');
            $active = $('.home-banners a.active');

            // switch it out
            $active.removeClass('active');
            $element.addClass('active');

            this.initBanners(this.bannerSize);
        }

        //
        // Init Tabs
        //
    }, {
        key: 'initTabs',
        value: function initTabs() {
            // check local storage
            if (localStorage.getItem('homePosts')) {
                var tab = localStorage.getItem('homePosts');
                AppHome.setHomePostTab(tab);
            }

            // on button click
            $('.home-tabs').on('click', 'nav button[data-tab]', function (event) {
                var tab = $(event.currentTarget).attr('data-tab');
                localStorage.setItem('homePosts', tab);
                AppHome.setHomePostTab(tab);
            });
        }

        //
        // Set the tabe for the home posts
        //
    }, {
        key: 'setHomePostTab',
        value: function setHomePostTab(tab) {
            // unactive
            $('.home-tabs .active').removeClass('active');

            // set new tab active
            $('.home-tabs').find('div.home-tabs-contents[data-tab="' + tab + '"]').addClass('active');

            $('.home-tabs').find('nav button[data-tab="' + tab + '"]').addClass('active');
        }
    }, {
        key: 'rotateScreenshots',
        value: function rotateScreenshots() {
            var _this4 = this;

            var $images = $('.home-screenshots'),
                $active = $images.find('a.active'),
                $next = $active.next().length ? $active.next() : $images.find('a').eq(0);

            setTimeout(function () {
                $active.removeClass('active');
                $next.addClass('active');
                _this4.rotateScreenshots();
            }, 3000);
        }
    }]);

    return AppHomeClass;
})();

var AppHome = new AppHomeClass();

//
// Account
//

var AppLanguagesClass = (function () {
    function AppLanguagesClass() {
        _classCallCheck(this, AppLanguagesClass);

        this.data = {
            custom: null,
            params: null
        };
    }

    //
    // Set some translations
    //

    _createClass(AppLanguagesClass, [{
        key: 'set',
        value: function set(type, data) {
            this.data[type] = data;
        }

        //
        // Get a custom language
        //
    }, {
        key: 'custom',
        value: function custom(id) {
            return this.data.custom[id];
        }

        //
        // Get parameters
        //
    }, {
        key: 'params',
        value: function params(id) {
            return this.data.params[id];
        }
    }]);

    return AppLanguagesClass;
})();

var languages = new AppLanguagesClass();

/**
 * Menu class
 */

var AppMenuClass = (function () {
    function AppMenuClass() {
        _classCallCheck(this, AppMenuClass);
    }

    _createClass(AppMenuClass, [{
        key: 'watch',
        value: function watch() {
            $('.user-menu-open').on('click', function (event) {
                $('.mobile-menu').addClass('active');
            });

            $('.user-menu-close').on('click', function (event) {
                $('.mobile-menu').removeClass('active');
            });
        }
    }]);

    return AppMenuClass;
})();

$(function () {
    var AppMenu = new AppMenuClass();
    AppMenu.watch();
});

//
var MapPositionSubmit = {
    send: function send() {
        $('.submit-response').html('');

        if ($('#pos_xyz').val().length == 0) {
            $('.submit-response').html('<div class="alert alert-error mt10"><h5>Error</h5> Please enter an X/Y position</div>');
            return;
        }

        if ($('#pos_map').val().length == 0) {
            $('.submit-response').html('<div class="alert alert-error mt10"><h5>Error</h5> Please select a map</div>');
            return;
        }

        var xy = 'XY: `' + $('#pos_xyz').val() + '`',
            map = 'Placename: ' + $('#pos_map').val(),
            info = $('#pos_info').val();

        var string = "# Map position submitted: \n\n\n" + [info, map, xy].join("\n\n");
        var admin = $('#pos_admin');

        // if admin or not
        if (admin && admin.val()) {
            var data = {
                position: $('#pos_xyz').val().trim().replace('/', ','),
                placename: $('#pos_map').val(),
                type: $('#pos_type').val(),
                id: $('#pos_id').val()
            };

            console.log(data);

            $.ajax({
                url: '/update/position',
                data: data,
                method: 'POST',
                success: function success(data) {
                    if (data) {
                        location.reload();
                    }
                },
                error: function error(data, status, code) {
                    console.error(data);
                    console.error(status, code);
                }
            });
        } else {
            var data = {
                url: location.href,
                section: 'Data',
                category: 'Map Position',
                title: info,
                message: string,
                folder: 'Map Position',
                info: {}
            };

            $.ajax({
                url: '/feedback/submit',
                data: data,
                method: 'POST',
                success: function success(data) {
                    $('.submit-response').html('<div class="alert alert-success mt10"><h5>Position submitted, thank you.</h5> This page will update once it has been reviewed</div>');
                },
                error: function error(data, status, code) {
                    console.error(data);
                    console.error(status, code);
                }
            });
        }
    }
};
//
// Handle the main navigation
//

var ManualUpdateClass = (function () {
    function ManualUpdateClass() {
        _classCallCheck(this, ManualUpdateClass);
    }

    //
    // Handle the main navigation
    //

    _createClass(ManualUpdateClass, [{
        key: 'watch',
        value: function watch() {
            var id = $('.character-profile').attr('data-id');

            $('html').on('click', '#manualUpdateCharacter', function (event) {
                $(event.currentTarget).loading();

                $.ajax({
                    url: 'https://xivsync.com/character/update/' + id,
                    cache: false,
                    dataType: 'json',
                    success: function success(response) {
                        $(event.currentTarget).loading(true);
                        if (response.success) {
                            var _msg = response.message + '\nPlease allow up to 5-10 minutes before it shows up on your profile!';
                            swal("Got it!", _msg, "success");
                            return;
                        }

                        var msg = 'Could not request update at this moment, try again shortly.';
                        swal("Sorry!", msg, 'error');
                    },
                    error: function error(response) {}
                });
            });
        }
    }]);

    return ManualUpdateClass;
})();

var ProfileNavigationClass = (function () {
    function ProfileNavigationClass() {
        _classCallCheck(this, ProfileNavigationClass);
    }

    // Initialize form classes

    _createClass(ProfileNavigationClass, [{
        key: 'watch',
        value: function watch() {
            var _this5 = this;

            //
            // Switching the main navigation on the left
            //
            $('html').on('click', '.cp-nav > button', function (event) {
                var id = $(event.currentTarget).attr('data-id');
                _this5.switchTab(id);
                $(window).trigger('lookup');
            });

            //
            // Switching class on the class/job list
            //
            $('html').on('click', '.character-classes .cc-list button', function (event) {
                var id = $(event.currentTarget).attr('data-cc');
                _this5.switchClassesPage(id);
                $(window).trigger('lookup');
            });

            //
            // Switching gearset
            //
            $('html').on('click', '.character-gearsets .gs-list button', function (event) {
                var id = $(event.currentTarget).attr('data-gs');
                _this5.switchGearsetsPage(id);
                $(window).trigger('lookup');
            });

            //
            // Switching timeline date
            //
            $('html').on('click', '.character-timeline .tl-list button', function (event) {
                var id = $(event.currentTarget).attr('data-tl');
                _this5.switchTimelinePage(id);
                $(window).trigger('lookup');
            });

            //
            // Switching achievement category
            //
            $('html').on('click', '.character-achievements .ac-list button', function (event) {
                var id = $(event.currentTarget).attr('data-ac');
                _this5.switchAchievementsPage(id);
                $(window).trigger('lookup');
            });
        }

        //
        // Switch tab
        //
    }, {
        key: 'switchTab',
        value: function switchTab(id) {
            // remove active states
            $('.cp-nav > button.active, .cp-content > div.active').removeClass('active');

            // set active states
            $('.cp-nav > button[data-id="' + id + '"], .cp-content > div[data-id="' + id + '"]').addClass('active');

            // get tooltips
            if (typeof XIVDBTooltips !== 'undefined' && !isOnMobile()) {
                XIVDBTooltips.get();
            }
        }

        //
        // Switch classes page
        //
    }, {
        key: 'switchClassesPage',
        value: function switchClassesPage(id) {
            // remove active states
            $('.character-classes .cc-page.active, .character-classes .cc-list button.active').removeClass('active');

            // set active states
            $('.character-classes .cc-page[data-cc="' + id + '"], .character-classes .cc-list button[data-cc="' + id + '"]').addClass('active');

            // get tooltips
            if (typeof XIVDBTooltips !== 'undefined' && !isOnMobile()) {
                XIVDBTooltips.get();
            }
        }

        //
        // Switch gearsets page
        //
    }, {
        key: 'switchGearsetsPage',
        value: function switchGearsetsPage(id) {
            // remove active states
            $('.character-gearsets .gs-page.active, .character-gearsets .gs-list button.active').removeClass('active');

            // set active states
            $('.character-gearsets .gs-page[data-gs="' + id + '"], .character-gearsets .gs-list button[data-gs="' + id + '"]').addClass('active');

            // get tooltips
            if (typeof XIVDBTooltips !== 'undefined' && !isOnMobile()) {
                XIVDBTooltips.get();
            }
        }

        //
        // Switch timeline!
        //
    }, {
        key: 'switchTimelinePage',
        value: function switchTimelinePage(id) {
            var idSplit = id.split(','),
                year = idSplit[0],
                month = idSplit[1];

            // remove active states
            $('.character-timeline').find('.tl-page.active, .tl-list.active, .tl-list button.active').removeClass('active');

            // set active states
            $('.character-timeline').find('.tl-page[data-tl="' + id + '"], .tl-list[data-tl="' + year + '"], .tl-list .tl-list-months button[data-tl="' + id + '"]').addClass('active');

            // get tooltips
            if (typeof XIVDBTooltips !== 'undefined' && !isOnMobile()) {
                XIVDBTooltips.get();
            }
        }

        //
        // Switch achievements page!
        //
    }, {
        key: 'switchAchievementsPage',
        value: function switchAchievementsPage(id) {
            // remove active states
            $('.character-achievements').find('.ac-page.active, .ac-list button.active').removeClass('active');

            // set active states
            $('.character-achievements').find('.ac-page[data-ac="' + id + '"], .ac-list button[data-ac="' + id + '"]').addClass('active');

            // get tooltips
            if (typeof XIVDBTooltips !== 'undefined' && !isOnMobile()) {
                XIVDBTooltips.get();
            }

            // scroll top as list is long
            if ($(document).scrollTop() > 400) {
                $('body').scrollTop(220);
            }
        }
    }]);

    return ProfileNavigationClass;
})();

var ProfileNavigation = new ProfileNavigationClass(),
    ManualUpdate = new ManualUpdateClass();

$(function () {
    // Watch navigation
    ProfileNavigation.watch();
    ManualUpdate.watch();

    $('button[data-remove-gearset]').on('click', function (event) {
        var url = $(event.currentTarget).attr('data-remove-gearset');
        $.ajax({
            url: url,
            cache: false,
            success: function success(response) {
                if (response[0]) {
                    swal("All good!", response[1], "success");
                } else {
                    swal("Wups", response[1], "error");
                }
            },
            error: function error(a, b, c) {}
        });
    });
});

//
// Content: Achievements
//

var ContentAchievementsClass = (function () {
    function ContentAchievementsClass() {
        _classCallCheck(this, ContentAchievementsClass);
    }

    _createClass(ContentAchievementsClass, [{
        key: 'get',

        // get achievements
        value: function get(id, callback) {
            setTimeout(function () {
                $.ajax({
                    url: '/achievement/' + id + '/xivsync/census',
                    cache: true,
                    success: function success(data) {
                        callback(data);
                    },
                    error: function error(response, status, _error7) {
                        console.error('Achievement fetch error: ', response.responseText);
                    }
                });
            }, 1000);
        }

        //
        // Render on content pages
        //
    }, {
        key: 'render',
        value: function render($dom, data) {
            console.log(data);
            html = [];

            if (data.eligable > 0) {
                html.push('<h4>Obtain Rate</h4>');

                // percent who have it
                html.push('\n\t\t\t\t<div class="as-row as-row-flex">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t' + data.obtained_percent + '%\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style="margin:-8px 0 10px 0;">\n\t\t\t\t\t\t<div style="font-size:14px;"><strong>' + number_format(data.obtained) + '</strong> of ' + number_format(data.eligable) + '</div> \n\t\t\t\t\t\teligible characters have earned this achievement.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t');

                // graph key
                html.push('\n\t\t\t\t<div class="as-release-date">Achievement release date: ' + data.release_date + '</div>\n\t\t\t');
            } else {
                html.push('No characters on XIVSync have obtained this achievement.');
                html.push('<div class="as-none">Achievement released: ' + data.release_date + '</div>');
            }

            $dom.html(html.join(''));
        }
    }]);

    return ContentAchievementsClass;
})();

var ContentAchievements = new ContentAchievementsClass();

//
// Submit Content Information Class
//

var SubmitInformationClass = function SubmitInformationClass() {
    var _this6 = this;

    _classCallCheck(this, SubmitInformationClass);

    this.$form = $('.content-submit-information');

    $('html').on('click', '.tc-submit', function () {
        _this6.$form.addClass('active');
        _this6.$form.find('.content-title').text(window.location.pathname);
    });

    $('html').on('click', '.csi-close', function () {
        _this6.$form.removeClass('active');
    });

    // Tab selection
    $('html').on('click', '.csi-menu > span', function (event) {
        var $btn = $(event.currentTarget),
            tab = $btn.attr('data-tab');

        $('.csi-menu, .csi-tabs').find('.active').removeClass('active');

        $btn.addClass('active');
        $('.csi-tabs #csi-' + tab).addClass('active');
    });

    // duplicate map position
    $('html').on('click', '.posrow button#duplicate', function (event) {
        var $row = $(event.currentTarget).parent(),
            $newRow = $row.clone(),
            selectEntry = $row.find('select').val();

        $newRow.insertAfter($row);
        $newRow.find('select').val(selectEntry);
    });

    $('html').on('submit', '#form_positions', function (event) {
        event.preventDefault();

        var positions = [];

        $('.posrow').each(function (i, element) {
            var $row = $(element);

            positions.push({
                pos_map: $row.find('#pos_map').val(),
                pos_x: $row.find('#pos_x').val(),
                pos_z: $row.find('#pos_z').val(),
                pos_notes: $row.find('#pos_notes').val(),
                content_id: $row.find('#content_id').val(),
                content_type: $row.find('#content_type').val()
            });
        });

        var data = {
            url: window.location.href,
            data: positions
        };

        $.ajax({
            url: '/feedback/content/submit/map',
            data: data,
            method: 'POST',
            cache: false,
            success: function success(data) {
                if (data == 'ok') {
                    $('#form_positions .submit-box').html('<div class="alert alert-success">Thank you! Your map positions have been sent and will added to the site once a moderator has checked it! :)</div>');
                    return;
                }

                console.error(data);
            },
            error: function error(d1, d2, d3) {
                console.error(d1, d2, d3);
            }
        });
    });

    $('html').on('submit', '#form_textinfo', function (event) {
        event.preventDefault();

        var message = $('#textinfo').val();

        $.ajax({
            url: '/feedback/content/submit/information',
            data: {
                url: window.location.href,
                message: message
            },
            method: 'POST',
            cache: false,
            success: function success(data) {
                if (data == 'ok') {
                    $('#form_textinfo .submit-box').html('<div class="alert alert-success">Thank you! Your information will be added to the site once a moderator has checked it!</div>');
                    return;
                }
                console.error(data);
            },
            error: function error(d1, d2, d3) {
                console.error(d1, d2, d3);
            }
        });
    });
};

$(function () {
    var SubmitInformation = new SubmitInformationClass();
});

//
// XIVDB Map Convert
// - Converts coordinates
//
// Remember, z = y in dats
//

var XIVDBMapsConverterClass = (function () {
    function XIVDBMapsConverterClass() {
        _classCallCheck(this, XIVDBMapsConverterClass);
    }

    //
    // Map Html
    //

    _createClass(XIVDBMapsConverterClass, [{
        key: 'gameTo2d',

        //
        // Convert "in-game" to "2d" format
        //
        value: function gameTo2d(x, y, scale, iconSize) {
            // Account for padding on the icon
            iconSize = iconSize;

            // divide scale so it can be used as a multiplication
            scale = scale / 100;

            // force offset
            var offset = 1;

            // calculate x and y
            var x = (x - offset) * 50 * scale;
            var y = (y - offset) * 50 * scale;

            return {
                x: x - iconSize / 2,
                y: y - iconSize / 2
            };
        }

        //
        // Convert "in-game" to "levels" format
        //
    }, {
        key: 'gameToLevels',
        value: function gameToLevels(x, y, scale) {
            scale = scale / 100;

            x = x * 50 - 25 - 1024 / scale;
            y = y * 50 - 25 - 1024 / scale;

            return {
                x: x,
                y: y
            };
        }

        //
        // Convert "levels" to "in-game" format
        //
    }, {
        key: 'levelsToGame',
        value: function levelsToGame(x, y, scale, offset) {
            scale = scale / 100;

            x = (x + offset) * scale;
            y = (y + offset) * scale;

            x = 41.5 / scale * ((x + 1024.0) / 2048.0) + 1;
            y = 41.5 / scale * ((y + 1024.0) / 2048.0) + 1;

            return {
                x: x,
                y: y
            };
        }
    }]);

    return XIVDBMapsConverterClass;
})();

var XIVDBMapsHtmlClass = (function () {
    function XIVDBMapsHtmlClass() {
        _classCallCheck(this, XIVDBMapsHtmlClass);
    }

    //
    // XIVDB Maps Markers
    // - Handles all map markers
    //

    _createClass(XIVDBMapsHtmlClass, [{
        key: 'getEmbedHtml',

        //
        // Get the embed html
        //
        value: function getEmbedHtml() {
            return '\n        <div class="xivdb-map-embed">\n\t\t\t<div class="xivdb-map-selector"></div>\n\t\t\t<div class="xivdb-map-name">---</div>\n            <div class="xivdb-map-pan">\n                <div class="xivdb-map-frame">\n                    <div class="xivdb-map-img"></div>\n                    <div class="xivdb-map-icons"></div>\n                </div>\n            </div>\n        </div>';
        }

        //
        // Get Embed Map img (uncached)
        //
    }, {
        key: 'getMapImageHtml',
        value: function getMapImageHtml(path) {
            return '<img src="' + path + '?t=' + Date.now() + '">';
        }
    }]);

    return XIVDBMapsHtmlClass;
})();

var XIVDBMapsMarkerClass = (function () {
    function XIVDBMapsMarkerClass() {
        var _this7 = this;

        _classCallCheck(this, XIVDBMapsMarkerClass);

        this.$container = null;
        this.activeMapid = null;
        this.list = {};
        this.events = {};

        $('html').on('click', '.xivdb-map-marker', function (event) {
            var marker = $(event.target).attr('id');
            marker = _this7.list[_this7.activeMapid][marker];

            if (_this7.events.markerOnClick) {
                _this7.events.markerOnClick(marker);
            }
        });
    }

    //
    // XIVDB Maps Class
    //

    //
    // Set container
    //

    _createClass(XIVDBMapsMarkerClass, [{
        key: 'setContainer',
        value: function setContainer(container) {
            this.$container = container;
            return this;
        }

        //
        // Load markers
        //
    }, {
        key: 'load',
        value: function load() {
            var _this8 = this;

            var map = XIVDBMaps.map;

            // set map data
            $.ajax({
                url: XIVDBMaps.options.apiUrl + '/maps/get/markers?placename=' + map.placename_id,
                cache: false,
                dataType: 'json',
                method: 'GET',
                success: function success(data) {
                    // clear any markers
                    _this8.clear();

                    // if markers, begin adding them
                    if (data.length > 0) {
                        for (var i in data) {
                            // create marker object
                            var point = data[i],
                                _marker = {
                                id: point.hash,
                                map: point.map_id,
                                icon: point.icon.image,
                                size: point.icon.size,
                                x: point.app_position.ingame.x,
                                y: point.app_position.ingame.y,
                                focus: false,
                                name: point.content_name,
                                tooltip: point.tooltip
                            };

                            // calculate position
                            _marker.pos = XIVDBMapsConverter.gameTo2d(_marker.x, _marker.y, XIVDBMaps.map.size_factor, _marker.size);
                            _marker.id = _marker.id ? _marker.id : 'mm' + Math.floor(Math.random() * 99999999 + 1);

                            if (!_this8.list[_marker.map]) {
                                _this8.list[_marker.map] = {};
                            }

                            _this8.list[_marker.map][_marker.id] = _marker;
                        }

                        _this8.render();
                    }
                },
                error: function error(data, status, _error8) {
                    console.error('XIVDB Maps Load Error');
                    console.error(data.responseText, status, _error8);
                }
            });
        }

        //
        // Render markers
        //
    }, {
        key: 'render',
        value: function render() {
            // remove visual icons
            this.$container.html('');

            // get markers for current layer
            var mapId = XIVDBMaps.mapLayers[XIVDBMaps.mapLayerIndex].id,
                markers = this.list[mapId];

            this.activeMapid = mapId;

            // render
            for (var i in markers) {
                this.add(markers[i]);
            }
        }

        //
        // Add an icon to the map
        //
    }, {
        key: 'add',
        value: function add(data) {
            if (!data.pos) {
                // calculate position
                data.pos = XIVDBMapsConverter.gameTo2d(data.x, data.y, XIVDBMaps.map.size_factor, data.size);
                data.id = data.id ? data.id : 'mm' + Math.floor(Math.random() * 99999999 + 1);
            }

            var size = 'width:' + data.size + 'px;height:' + data.size + 'px';
            styles = 'left:' + data.pos.x + 'px;top:' + data.pos.y + 'px;', marker = '';

            if (data.icon) {
                marker = '<img class="xivdb-map-marker xivdb-map-marker-img" src="' + data.icon + '" style="' + styles + size + '" id="' + data.id + '" data-tt="' + data.tooltip + '">';
            } else {
                marker = '<span class="xivdb-map-marker xivdb-map-marker-' + data.color + '" style="' + styles + size + '" id="' + data.id + '" data-tt="' + tooltip + '"></span>';
            }

            // add to list
            this.$container.append(marker);

            // if to focus it
            if (data.focus) {
                XIVDBMaps.focus(data);
            }

            return this;
        }

        //
        // Clear icons
        //
    }, {
        key: 'clear',
        value: function clear() {
            this.list = {};
        }

        //
        // onclick event
        //
    }, {
        key: 'onClick',
        value: function onClick(callback) {
            var _this9 = this;

            $('html').on('click', '.xivdb-map-marker', function (event) {
                var id = $(event.currentTarget).attr('id');
                callback({
                    id: id,
                    marker: _this9.list[id],
                    element: $(event.currentTarget)
                });
            });
        }
    }]);

    return XIVDBMapsMarkerClass;
})();

var XIVDBMapsClass = (function () {
    function XIVDBMapsClass() {
        _classCallCheck(this, XIVDBMapsClass);

        this.Markers = new XIVDBMapsMarkerClass();

        this.classname = null;
        this.mapLayers = {};
        this.mapLayerIndex = 0;
        this.map = null;
        this.options = {};
        this.events = {};

        // selectors
        this.$map = null;
        this.$embed = null;
        this.$panzoom = null;
        this.$pans = null;
        this.$frame = null;
        this.$selector = null;
    }

    _createClass(XIVDBMapsClass, [{
        key: 'init',
        value: function init() {
            this.validateOptions();
            this.watcher();
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.Markers.list = {};
            this.mapLayers = {};
            this.mapLayerIndex = 0;
            this.map = null;

            // selectors
            this.$map = null;
            this.$embed = null;
            this.$panzoom = null;
            this.$pans = null;
            this.$frame = null;
            this.$selector = null;
        }
    }, {
        key: 'watcher',
        value: function watcher() {
            var _this10 = this;

            $('html').on('change', '.xivdb-map-selector', function (event) {
                var value = $(event.currentTarget).find('option:selected').val();
                _this10.mapLayerIndex = value;
                _this10.mapLoader();
                _this10.Markers.render();
            });
        }

        // move to a specific layer
    }, {
        key: 'moveToLayer',
        value: function moveToLayer(index) {
            this.$selector.find('select').val(index);
            this.mapLayerIndex = index;
            this.mapLoader();
        }

        //
        // Load map data from API
        //
    }, {
        key: 'getLayers',
        value: function getLayers(id, callback) {
            // set map data
            $.ajax({
                url: this.options.apiUrl + '/maps/get/layers/placename',
                data: {
                    id: id
                },
                cache: false,
                dataType: 'json',
                method: 'GET',
                success: function success(data) {
                    callback(data);
                },
                error: function error(data, status, _error9) {
                    console.error('XIVDB Maps Load Error');
                    console.error(data.responseText, status, _error9);
                }
            });
        }

        //
        // Embed a map
        //
    }, {
        key: 'embed',
        value: function embed(classname, id, callback) {
            var _this11 = this;

            this.reset();
            this.classname = classname;
            this.domHandler();

            // get map layers
            this.getLayers(id, function (data) {
                if (!data.status) {
                    return console.error('Failed to get layers');
                }

                _this11.mapLayers = data.data;
                _this11.populateZones();
                _this11.mapLoader();
                callback();
            });
        }

        //
        // Embed a map
        //
    }, {
        key: 'domHandler',
        value: function domHandler() {
            var _this12 = this;

            // inject html
            this.$section = $(this.classname);
            this.$section.html(XIVDBMapsHtml.getEmbedHtml());
            this.$section.css({
                height: this.options.height ? this.options.height : '100%',
                width: this.options.width ? this.options.width : '100%'
            });

            // set frame
            this.$frame = this.$section.find('.xivdb-map-frame');

            // embed map
            this.$embed = this.$section.find('.xivdb-map-embed');
            this.$embed.css({
                height: this.options.height ? this.options.height : '100%',
                width: this.options.width ? this.options.width : '100%'
            });

            // add panning
            this.$pan = this.$section.find('.xivdb-map-pan');
            this.$panzoom = this.$pan.panzoom({
                transition: false
            });

            // add zooming
            this.$panzoom.parent().on('mousewheel.focal', function (event) {
                event.preventDefault();
                var delta = event.delta || event.originalEvent.wheelDelta;
                var zoomOut = delta ? delta < 0 : event.originalEvent.deltaY > 0;

                // add zooms
                _this12.$panzoom.panzoom('zoom', zoomOut, {
                    increment: _this12.options.zoomIncrement,
                    animate: _this12.options.zoomAnimate,
                    minScale: _this12.options.zoomMinScale,
                    maxScale: _this12.options.zoomMaxScale,
                    focal: event
                });
            });

            // set frame height/width
            this.$frame.width(this.options.frameWidth).height(this.options.frameHeight);
            this.$pan.width(this.options.frameWidth).height(this.options.frameHeight);

            // selector
            this.$selector = this.$section.find('.xivdb-map-selector');

            // set marker icon container
            this.Markers.setContainer(this.$frame.find('.xivdb-map-icons'));
            return this;
        }

        //
        // Populate zones
        //
    }, {
        key: 'populateZones',
        value: function populateZones() {
            // populate selector
            if (this.mapLayers.length > 1) {
                // add select
                this.$selector.html('<select></select>');

                // add zones
                for (var i in this.mapLayers) {
                    var layer = this.mapLayers[i],
                        zonename = 'Layer #' + (parseInt(i) + 1);

                    if (typeof layer.zone != 'undefined' && layer.zone != 0) {
                        zonename = zonename + ' - ' + layer.zone;
                    }

                    var _html = '<option value="' + i + '">' + zonename + '</option>';
                    this.$selector.find('select').append(_html);
                }
            }
        }

        //
        // Load a map from its placename ID
        //
    }, {
        key: 'mapLoader',
        value: function mapLoader() {
            // load map file
            this.map = this.mapLayers[this.mapLayerIndex];
            this.setMapData();

            var mapImage = XIVDBMapsHtml.getMapImageHtml(this.map.image);

            // inject map
            this.$frame.find('.xivdb-map-img').html(mapImage);
            this.center();

            if (this.events.mapLayerUpdate) {
                this.events.mapLayerUpdate(this.mapLayerIndex);
            }

            return this;
        }

        //
        // Focus on a specific marker
        //
    }, {
        key: 'focus',
        value: function focus(marker) {
            var _this13 = this;

            setTimeout(function () {
                var embedWidth = _this13.$embed.width(),
                    embedHeight = _this13.$embed.height(),
                    markerLeft = marker.pos.x,
                    markerTop = marker.pos.y,
                    markerWidth = $('#' + marker.id).width(),
                    markerHeight = $('#' + marker.id).height();

                var left = markerLeft - embedWidth / 2 + markerWidth / 2,
                    top = markerTop - embedHeight / 2 + markerHeight / 2;

                _this13.$panzoom.panzoom('pan', -left, -top).panzoom('zoom', _this13.options.zoomDefault);
            }, 200);

            return this;
        }

        //
        // Center a map
        //
    }, {
        key: 'center',
        value: function center() {
            var embedWidth = this.$embed.width(),
                embedHeight = this.$embed.height(),
                mapWidth = this.options.frameWidth,
                mapHeight = this.options.frameHeight;

            var left = mapWidth / 2 - embedWidth / 2,
                top = mapHeight / 2 - embedHeight / 2;

            this.$panzoom.panzoom('pan', -left, -top).panzoom('zoom', this.options.zoomDefault);

            return this;
        }

        /**
         * Set map data
         */
    }, {
        key: 'setMapData',
        value: function setMapData() {
            $('.xivdb-map-name').html(this.map.placename + ' - ' + this.map.region);
        }

        // --- OPTIONS -----------------------------------------------

        //
        // Add events
        //
    }, {
        key: 'setEvent',
        value: function setEvent(eventname, callback) {
            // register events
            this.events[eventname] = callback;
            this.Markers.events[eventname] = callback;

            return this;
        }

        //
        // Set the options
        //
    }, {
        key: 'setOptions',
        value: function setOptions(options) {
            // Options passed
            this.options = options;
            return this;
        }

        //
        // Set a specific option
        //
    }, {
        key: 'setOption',
        value: function setOption(key, value) {
            this.options[key] = value;
            return this;
        }

        //
        // Get an option
        //
    }, {
        key: 'getOption',
        value: function getOption(setting) {
            return this.options[setting];
        }

        //
        // Verifies tooltips options and sets the default on missing ones
        //
    }, {
        key: 'validateOptions',
        value: function validateOptions() {
            for (var option in xivdb_maps_default) {
                if (typeof this.options[option] === 'undefined') {
                    this.options[option] = xivdb_maps_default[option];
                }
            }
        }
    }]);

    return XIVDBMapsClass;
})();

var xivdb_maps_default = {
    apiUrl: API_URL,

    // default height in px
    height: 500,
    width: 500,

    zoomDefault: 1,
    zoomIncrement: 0.1,
    zoomAnimate: true,
    zoomMinScale: 0.2,
    zoomMaxScale: 4,

    frameWidth: 2048,
    frameHeight: 2048
};

var XIVDBMaps = new XIVDBMapsClass(),
    XIVDBMapsConverter = new XIVDBMapsConverterClass(),
    XIVDBMapsHtml = new XIVDBMapsHtmlClass();

XIVDBMaps.setOptions(typeof xivdb_maps !== 'undefined' ? xivdb_maps : xivdb_maps_default).init();

//
// Search
//

var SearchClass = (function () {
    function SearchClass() {
        _classCallCheck(this, SearchClass);

        this.resultsFound = 0;
        this.resultsTotal = 0;
        this.firstCategory = null;
        this.page = 0;
        this.start = null;
        this.theone = 'All';
        this.timestamp = null;
    }

    //
    // Reset search
    //

    _createClass(SearchClass, [{
        key: 'reset',
        value: function reset() {
            this.resultsFound = 0;
            this.resultsTotal = 0;
            this.firstCategory = null;
            this.page = 0;
            this.start = null;
            //this.theone = 'All'; - Commented out as I can run queries multiple times.
        }

        //
        // Init
        //
    }, {
        key: 'init',
        value: function init() {
            this.checkSearchOptions();
            SearchUI.setStickyNav();
            return this;
        }

        //
        // Check search options against user defined ones
        //
    }, {
        key: 'checkSearchOptions',
        value: function checkSearchOptions() {
            // Auto-Search Delay
            SearchSettings.set('searchInputDelay', localStorage.getItem('searchInputDelay'));
            $('#searchInputDelay').val(SearchSettings.get('searchInputDelay'));

            // Auto-Search Enabled
            SearchSettings.set('searchAutoEnabled', localStorage.getItem('searchAutoEnabled'));
            $('#searchAutoEnabled').val(SearchSettings.get('searchAutoEnabled'));

            // Search Limit
            SearchSettings.set('searchResultsLimit', localStorage.getItem('searchResultsLimit'));
            $('#searchResultsLimit').val(SearchSettings.get('searchResultsLimit'));

            // Auto-Search Enabled
            SearchSettings.set('searchStickyNav', localStorage.getItem('searchStickyNav'));
            $('#searchStickyNav').val(SearchSettings.get('searchStickyNav'));

            // Stick search enabled
            SearchSettings.set('searchStrict', localStorage.getItem('searchStrict'));
            $('#searchStrict').val(SearchSettings.get('searchStrict'));
            return this;
        }

        //
        // Run an search query
        //
    }, {
        key: 'runQuery',
        value: function runQuery() {
            ttdrop();

            // always set string
            this.setString();

            // begin
            SearchUI.setTimer();
            SearchUI.toggleSearchLoader(true);
            SearchUI.setSearchView();
            SearchUI.setFilterView();
            SearchTitle.preShow('Searching...');
            SearchEvents.setSearchInputState();
            SearchRender.resetActiveTab();

            this.reset();
            var _this = this;

            data = SearchBuilder.get();
            data['language'] = LANGUAGE;
            data['limit'] = SearchSettings.get('searchResultsLimit');
            data['strict'] = SearchSettings.get('searchStrict');

            if (Object.keys(SearchFilters.filterParameters).length == 0) {
                $('.filter-notice').removeClass('active');
                $('.filter-toggle').removeClass('on');
            } else {
                $('.filter-notice').addClass('active');
                $('.filter-toggle').addClass('on');
            }

            $.ajax({
                url: API_URL + '/search',
                data: data,
                cache: false,
                dataType: 'json',
                method: 'GET',
                success: function success(results) {
                    _this.render(results);
                },
                error: function error(data, status, _error10) {
                    console.error(data, status, _error10);
                },
                complete: function complete() {
                    // Toggle stuff
                    SearchUI.toggleSearchLoader().showSearchResults().setStickyNav().updateStickyNav().scrollToSearch();

                    SearchUrl.set();
                }
            });

            return this;
        }

        //
        // Render results
        //
    }, {
        key: 'render',
        value: function render(results) {
            // hide tooltips
            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.hide();
            }

            ttdrop();

            // reset search
            SearchRender.reset();
            SearchPaging.reset();

            // loop through results
            for (var category in results) {
                // ensure lower case
                category = category.toLowerCase();

                // set data and total
                var data = results[category].results,
                    paging = results[category].paging,
                    total = parseInt(results[category].total);

                // ensure we have results
                if (data && data.length > 0) {
                    // increase to total results
                    this.resultsFound = this.resultsFound + parseInt(data.length);
                    this.resultsTotal = this.resultsTotal + parseInt(total);

                    // set the first category
                    this.firstCategory = !this.firstCategory ? category : this.firstCategory;

                    // set title
                    var title = ucwords(category),
                        title = title == 'Npcs' ? 'NPCs' : title;

                    // render
                    SearchRender.renderSearchTab(category, title, total);
                    SearchRender.renderSearchGroup(category);
                    SearchRender.renderSearchResults(category, data);

                    // render paging
                    SearchPaging.renderPaging(category, paging, total, data.length);

                    // show first category
                    SearchRender.setActiveTab(this.firstCategory);
                }
            }

            // finished
            SearchUI.showResultsInfo(this.resultsFound, this.resultsTotal);

            // set title
            var searchTitle = null;
            if (SearchBuilder.get('one')) {
                searchTitle = SearchBuilder.get('string') ? SearchBuilder.get('string') + ' - ' + number_format(this.resultsTotal) + ' ' + ucwords(SearchBuilder.get('one')) : number_format(this.resultsTotal) + ' ' + ucwords(SearchBuilder.get('one'));
            } else {
                searchTitle = SearchBuilder.get('string') ? SearchBuilder.get('string') + ' - ' + number_format(this.resultsTotal) + ' Results' : number_format(this.resultsTotal) + ' Results';
            }

            SearchTitle.set(searchTitle + ' - Search');
            SearchTitle.show();

            // if no results show no results banner
            // otherwise hide banner
            this.resultsTotal == 0 ? SearchUI.showNoResults() : SearchUI.hideNoResults();

            // if cart open, reattach drag
            if (Cart.isOpen()) {
                CartUI.setIconsDraggable();
            }

            // if cart wardrobe, reattach drag
            if (Wardrobe.isOpen()) {
                WardrobeUI.setIconsDraggable();
            }

            // load icons
            setTimeout(function () {
                $('.entity img').unveil();
                $(window).trigger('lookup');
            }, 250);
        }

        //
        // Add string search, if it exists
        //
    }, {
        key: 'setString',
        value: function setString() {
            var value = SearchUI.getInputText();
            if (value && value.length > 0) {
                SearchBuilder.add('string', value);
            }

            return this;
        }

        //
        // Set One
        //
    }, {
        key: 'setOne',
        value: function setOne(value) {
            this.theone = value;
            SearchBuilder.add('one', value);
            return this;
        }

        //
        // Set pagek
        //
    }, {
        key: 'setPage',
        value: function setPage(value) {
            SearchBuilder.add('page', value);
            return this;
        }

        //
        // Add a page
        //
    }, {
        key: 'setOrder',
        value: function setOrder(value) {
            SearchBuilder.add('order', value);
            return this;
        }
    }]);

    return SearchClass;
})();

var Search = new SearchClass();

//
// Search Builder
//

var SearchBuilderClass = (function () {
    function SearchBuilderClass() {
        _classCallCheck(this, SearchBuilderClass);

        this.data = {};
    }

    //
    // Add a 'GET' data attribute
    //

    _createClass(SearchBuilderClass, [{
        key: 'add',
        value: function add(type, value) {
            if (type == 'language') {
                return;
            }

            if (value || value.length > 0) {
                this.data[type] = value;
            }
        }

        //
        // Remove from search builder
        //
    }, {
        key: 'remove',
        value: function remove(type) {
            delete this.data[type];
        }

        //
        // reset the builder
        //
    }, {
        key: 'reset',
        value: function reset() {
            this.data = {};
        }

        //
        // get the 'GET' data
        //
    }, {
        key: 'get',
        value: function get(index) {
            if (index) {
                return this.data[index];
            }

            var data = this.data;
            return data;
        }
    }]);

    return SearchBuilderClass;
})();

var SearchBuilder = new SearchBuilderClass();
//
// Search Content
//

var SearchContentClass = (function () {
    function SearchContentClass() {
        _classCallCheck(this, SearchContentClass);

        this.bull = '<em class="bull">&bull;</em>';
    }

    _createClass(SearchContentClass, [{
        key: 'items',
        value: function items(data) {
            data.extra = [];

            if (data.level_equip > 0) {
                data.extra.push('<em class="blue">Lv ' + data.level_equip + '</em>');
            }

            if (data.level_item > 0) {
                data.extra.push('<em class="yellow">iLv ' + data.level_item + '</em>');
            }

            if (data.category_name) {
                data.extra.push('<em class="slot">' + data.category_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'quests',
        value: function quests(data) {
            data.extra = [];

            if (data.class_level_1 > 0) {
                data.extra.push('<em class="blue">Lv ' + data.class_level_1 + '</em>');
            }

            if (data.category_name) {
                data.extra.push('<em class="slot">' + data.category_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'actions',
        value: function actions(data) {
            data.extra = [];

            if (data.level > 0) {
                data.extra.push('<em class="blue">Lv ' + data.level + '</em>');
            }

            if (data.item_level > 0) {
                data.extra.push('<em class="yellow">iLv ' + data.item_level + '</em>');
            }

            if (data.class_name) {
                data.extra.push('<em class="slot">' + data.class_name + '</em>');
            }

            if (data.type_name) {
                data.extra.push('<em class="slot">' + data.type_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'achievements',
        value: function achievements(data) {
            data.extra = [];

            if (data.category_name) {
                data.extra.push('<em class="slot">' + data.category_name + '</em>');
            }

            if (data.kind_name) {
                data.extra.push('<em class="slot">' + data.kind_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'recipes',
        value: function recipes(data) {
            data.extra = [];

            if (data.level_view > 0) {
                data.extra.push('<em class="blue">Lv ' + data.level_view + '</em>');
            }

            if (data.level > 0) {
                data.extra.push('<em class="yellow">' + data.stars_html + ' ' + data.level + '</em>');
            }

            if (data.class_name) {
                data.extra.push('<em class="slot">' + data.class_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'instances',
        value: function instances(data) {
            data.extra = [];

            if (data.level > 0) {
                data.extra.push('<em class="blue">Lv ' + data.level + '</em>');
            }

            if (data.item_level > 0) {
                data.extra.push('<em class="yellow">iLv ' + data.item_level + '</em>');
            }

            if (data.content_name) {
                data.extra.push('<em class="slot">' + data.content_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'fates',
        value: function fates(data) {
            data.extra = [];

            if (data.class_level > 0) {
                data.extra.push('<em class="blue">Lv ' + data.class_level + '</em>');
            }

            if (data.placename) {
                data.extra.push('<em class="slot">' + data.placename + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'leves',
        value: function leves(data) {
            data.extra = [];

            if (data.class_level > 0) {
                data.extra.push('<em class="blue">Lv ' + data.class_level + '</em>');
            }

            if (data.assignment_type_name) {
                data.extra.push('<em class="slot">' + data.assignment_type_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'places',
        value: function places(data) {
            data.extra = [];

            if (data.region_name) {
                data.extra.push('<em class="slot">' + data.region_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'gathering',
        value: function gathering(data) {
            data.extra = [];

            if (data.level_view > 0) {
                data.extra.push('<em class="blue">Lv ' + data.level_view + '</em>');
            }

            if (data.level > 0) {
                data.extra.push('<em class="yellow">' + data.stars_html + ' ' + data.level + '</em>');
            }

            if (data.type_name) {
                data.extra.push('<em class="slot">' + data.type_name + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'npcs',
        value: function npcs(data) {
            data.extra = [];

            if (data.title) {
                data.extra.push('<em class="slot">' + data.title + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'enemies',
        value: function enemies(data) {
            data.extra = '';

            return data;
        }
    }, {
        key: 'emotes',
        value: function emotes(data) {
            data.extra = [];

            if (data.command) {
                data.extra.push('<em class="slot">' + data.command + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'status',
        value: function status(data) {
            data.extra = '';

            return data;
        }
    }, {
        key: 'titles',
        value: function titles(data) {
            data.extra = [];

            if (data.name_female) {
                data.extra.push('<em class="slot"><i class="fa fa-venus"></i> ' + data.name_female + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'minions',
        value: function minions(data) {
            data.extra = [];

            if (data.race) {
                data.extra.push('<em class="slot">' + data.race + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'mounts',
        value: function mounts(data) {
            data.extra = '';

            return data;
        }
    }, {
        key: 'weather',
        value: function weather(data) {
            data.extra = [];

            if (data.type) {
                data.extra.push('<em class="slot">' + data.type + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }, {
        key: 'characters',
        value: function characters(data) {
            data.extra = [];

            if (data.server) {
                data.extra.push('<em class="slot">' + data.server + '</em>');
            }

            data.extra = data.extra.join(this.bull);
            return data;
        }
    }]);

    return SearchContentClass;
})();

var SearchContent = new SearchContentClass();

//
// Search Event
//

var SearchEventsClass = (function () {
    function SearchEventsClass() {
        _classCallCheck(this, SearchEventsClass);

        this.searchInputTimer = null;
        this.searchInputState = null;
    }

    //
    // Watch the search input text box
    //

    _createClass(SearchEventsClass, [{
        key: 'watchSearchInput',
        value: function watchSearchInput() {
            var _this = this;
            $(SearchSettings.get('searchInputClass')).on('keyup', function (event) {
                if (event.keyCode == 13) {
                    // set search input and fetch results
                    _this.searchInputState = SearchUI.getInputText();
                    Search.setPage(1);
                    Search.setString();
                    Search.runQuery();
                    return;
                }

                // if disabled, don't do anything
                if (SearchSettings.get('searchAutoEnabled') == 'off') {
                    return;
                }

                // don't auto search on mobile, too laggy!
                if (isOnMobile()) {
                    return;
                }

                // clear any existing timer
                clearTimeout(_this.searchInputTimer);

                // has input not changed? this helps prevent random
                // keyups from trigger a search
                if (_this.searchInputState == SearchUI.getInputText() || SearchUI.getInputText().length == 0) {
                    return;
                }

                // set timeout
                _this.searchInputTimer = setTimeout(function () {
                    // set search input and fetch results
                    _this.searchInputState = SearchUI.getInputText();
                    Search.setPage(1);
                    Search.setString();
                    Search.runQuery();
                }, SearchSettings.get('searchInputDelay'));
            });
        }

        //
        // Set search input state
        //
    }, {
        key: 'setSearchInputState',
        value: function setSearchInputState() {
            this.searchInputState = SearchUI.getInputText();
        }

        //
        // Watch the search button mag-glass
        //
    }, {
        key: 'watchSearchButton',
        value: function watchSearchButton() {
            //
            // the search icon in the search input
            //
            $(SearchSettings.get('searchInputGlass')).on('click', function (event) {
                Search.setPage(1);
                Search.setString();
                Search.runQuery();
            });

            //
            // the search button on filters
            //
            $(SearchSettings.get('filterSearchButtonClass')).on('click', function (event) {
                // set filter one
                var type = $(event.currentTarget).parents('.filter-panel').attr('data-filter-type');
                Search.setOne(type);

                Search.setPage(1);
                Search.setString();
                Search.runQuery();
            });

            //
            // the reset button on filters
            //
            $(SearchSettings.get('filterClearButtonClass')).on('click', function (event) {
                // get "the one"
                var theone = Search.theone;

                SearchUrl.reset();
                SearchBuilder.reset();
                SearchFilters.reset();

                // reset the one
                //Search.setOne(theone);

                // search
                SearchUI.resetInputText();
                SearchUI.updateStickyNav();
                Search.runQuery();
            });

            //
            // search view buttons
            //
            $(SearchSettings.get('searchViewClass')).on('click', function (event) {
                var view = $(event.currentTarget).attr('data-search-view');
                SearchUI.setSearchView(view);
            });
        }

        //
        // Watch tab nav click
        //
    }, {
        key: 'watchSearchTabs',
        value: function watchSearchTabs() {
            // switch search tab
            var element = SearchSettings.get('searchResultsNavClass') + ' > span[data-category]';
            $('.site').on('click', element, function (event) {
                // change category
                var category = $(event.currentTarget).attr('data-category');
                $(SearchSettings.get('filterToggleClass')).removeClass('active');
                SearchRender.setActiveTab(category);

                // hide filters
                SearchFilters.hidePanel(category);

                // if extended filters are enable, ensure they load properly
                var view = localStorage.getItem('searchExtendedToggle');
                if (view && view == 'true') {
                    SearchUI.toggleExtendedFilters(true);
                }

                setTimeout(function () {
                    SearchUI.updateStickyNav();
                    $(window).trigger('lookup');
                }, 50);
            });
        }

        //
        // Watch search options
        //
    }, {
        key: 'watchSearchOptions',
        value: function watchSearchOptions() {
            // Toggle options panel
            $(SearchSettings.get('searchToggleOptionsClass')).on('click', function (event) {
                SearchUI.hideAllActivePanels('options').togglePanel('.search-options').updateStickyNav();

                if ($('.search-options').hasClass('open')) {
                    $(SearchSettings.get('searchToggleOptionsClass')).addClass('active');
                } else {
                    $(SearchSettings.get('searchToggleOptionsClass')).removeClass('active');
                }
            });

            // Toggle tools panel
            $(SearchSettings.get('searchToggleToolsClass')).on('click', function (event) {
                SearchUI.hideAllActivePanels('tools').togglePanel('.search-tools').updateStickyNav();

                if ($('.search-tools').hasClass('open')) {
                    $(SearchSettings.get('searchToggleToolsClass')).addClass('active');
                } else {
                    $(SearchSettings.get('searchToggleToolsClass')).removeClass('active');
                }
            });

            // Auto search delay change
            $('#searchInputDelay').on('keyup', function (event) {
                var value = parseInt($(event.target).val());

                // ensure if valud
                if (value && value > 50) {
                    SearchSettings.set('searchInputDelay', value);
                    localStorage.setItem('searchInputDelay', value);
                }
            });

            // Auto search delay change
            $('#searchAutoEnabled').on('change', function (event) {
                var value = $(event.target).val();
                SearchSettings.set('searchAutoEnabled', value);
                localStorage.setItem('searchAutoEnabled', value);
            });

            // Auto search delay change
            $('#searchResultsLimit').on('change', function (event) {
                var value = parseInt($(event.target).val());

                if (value >= 15 && value <= 90) {
                    SearchSettings.set('searchResultsLimit', value);
                    localStorage.setItem('searchResultsLimit', value);
                }
            });

            // Sticky nav change
            $('#searchStickyNav').on('change', function (event) {
                var value = $(event.target).val();
                SearchSettings.set('searchStickyNav', value);
                localStorage.setItem('searchStickyNav', value);
                value == 'on' ? SearchUI.setStickyNav().updateStickyNav() : SearchUI.removeStickyNav();
            });

            // Sticky nav change
            $('#searchStrict').on('change', function (event) {
                var value = $(event.target).val();
                SearchSettings.set('searchStrict', value);
                localStorage.setItem('searchStrict', value);
            });
        }

        //
        // Watch filter button click
        //
    }, {
        key: 'watchFilterToggle',
        value: function watchFilterToggle() {
            $(SearchSettings.get('filterToggleClass')).on('click', function (event) {
                var activeCategory = $(event.currentTarget).attr('data-category');
                $(event.currentTarget).toggleClass('active');

                SearchFilters.togglePanel(activeCategory);
                SearchUI.updateStickyNav();
            });
        }

        //
        // Watch filters
        //
    }, {
        key: 'watchFilterValues',
        value: function watchFilterValues() {
            // normal filters
            $(SearchSettings.get('searchHeaderClass')).on('click', 'input[type="checkbox"]', function (event) {
                event.stopPropagation();SearchFilters.handleCheckboxFilter(event);
            });
            $(SearchSettings.get('searchHeaderClass')).on('keyup', 'input[data-filter-field]', function (event) {
                event.stopPropagation();SearchFilters.handleFilter(event);
            });
            $(SearchSettings.get('searchHeaderClass')).on('change', 'select[data-filter-field]', function (event) {
                event.stopPropagation();SearchFilters.handleFilter(event);
            });

            // special: attribute filters
            $(SearchSettings.get('filterItemAttributesClass')).on('click', 'button.filter-param-button', function (event) {
                event.stopPropagation();SearchFiltersItemAttributes.handleItemAttributeFilter(event);
            });
            $(SearchSettings.get('filterItemAttributesClass')).on('click', 'span.filter-param-attribute-block', function (event) {
                event.stopPropagation();SearchFiltersItemAttributes.handleItemAttributeFilterRemoval(event);
            });

            // special: job class filters
            $(SearchSettings.get('filterClassJobsClass')).on('click', 'button', function (event) {
                event.stopPropagation();SearchFiltersClassJobs.handleClassJobFilter(event);
            });
        }

        //
        // Watch filter tabs
        //
    }, {
        key: 'watchFilterTabs',
        value: function watchFilterTabs() {
            $(SearchSettings.get('filterPanelOptions')).on('click', 'button', function (event) {
                // get tab option
                var $button = $(event.currentTarget),
                    tab = $button.attr('data-option');

                // hide active tab
                $button.parents('.filter-panel').find(SearchSettings.get('filterPanelTabs') + '.active').removeClass('active');
                $(SearchSettings.get('filterPanelOptions')).find('button.active').removeClass('active');

                // set new tab active
                $button.parents('.filter-panel').find(SearchSettings.get('filterPanelTabs') + '[data-tab="' + tab + '"]').addClass('active');
                $button.addClass('active');
                SearchUI.updateStickyNav();
            });
        }

        //
        // Watch paging buttons
        //
    }, {
        key: 'watchPagingButtons',
        value: function watchPagingButtons() {
            $(SearchSettings.get('searchPagingContainerClass')).on('click', 'button', function (event) {
                // get tab option
                var $button = $(event.currentTarget),
                    page = $button.attr('data-page'),
                    category = $button.parents('.search-one-paging').attr('data-category');

                // if page and category
                if (parseInt(page) && category) {
                    Search.setOne(category).setPage(page).runQuery();
                }
            });
        }

        //
        // Watch for an existing search
        //
    }, {
        key: 'watchExistingSearch',
        value: function watchExistingSearch() {
            var search = getParameterByName('search'),
                filters = getParameterByName('filters');

            if (search) {
                SearchUrl.setSearch(search);
            }

            if (filters) {
                SearchUrl.setFilters(filters);
            }

            if (search || filters) {
                SearchUrl.reloadSearchValues();
            }
        }
    }]);

    return SearchEventsClass;
})();

var SearchEvents = new SearchEventsClass();

// initialise search events
$(function () {
    SearchEvents.watchSearchButton();
    SearchEvents.watchSearchInput();
    SearchEvents.watchSearchTabs();
    SearchEvents.watchSearchOptions();

    SearchEvents.watchFilterToggle();
    SearchEvents.watchFilterValues();
    SearchEvents.watchFilterTabs();

    SearchEvents.watchPagingButtons();
    SearchEvents.watchExistingSearch();
});

//
// Search Filters
//

var SearchFiltersClass = (function () {
    function SearchFiltersClass() {
        _classCallCheck(this, SearchFiltersClass);

        this.filterParameters = {};
        this.filterItemAttributes = {};
        this.filterPanelActive = null;
        this.isFiltered = false;
    }

    //
    // Reset the filters
    //

    _createClass(SearchFiltersClass, [{
        key: 'reset',
        value: function reset() {
            this.hidePanel();

            this.filterParameters = {};
            this.filterItemAttributes = {};
            this.filterPanelActive = null;

            // empty all filter params
            $(SearchSettings.get('filterParamClass')).find('input').val('');
            $(SearchSettings.get('filterParamClass')).find('select').removeAttr('selected').find('option:first').attr('selected', 'selected');

            // remove any active states
            $(SearchSettings.get('filterParamClass')).find('.active').removeClass('active');
            $(SearchSettings.get('filterParamClass') + '.active').removeClass('active');

            // empty item attributes
            SearchFiltersItemAttributes.reset();

            // empty class jobs
            SearchFiltersClassJobs.reset();
        }

        //
        // Reload some filters
        //
    }, {
        key: 'reload',
        value: function reload(filters) {
            if (!filters) return;

            var filterObject = {};
            filterCategory = null, filterPage = null, filterItemAttributes = {}, filterClassJobs = {};

            // go through filters and split them out
            // also grabs "the one"
            for (var i in filters) {
                var data = filters[i].split('=');

                // class jobz
                if (data[0] == 'classjobs') {
                    filterClassJobs = data[1].split(',');
                    continue;
                }

                // attributes
                if (data[0] == 'attributes') {
                    filterItemAttributes = data[1].split(',');
                    continue;
                }

                // one
                if (data[0] == 'one') {
                    filterCategory = data[1];
                    continue;
                }

                // one
                if (data[0] == 'page') {
                    filterPage = data[1];
                    continue;
                }

                // filters
                filterObject[data[0]] = data[1];
            }

            // if class job filters
            if (filterClassJobs) {
                this.isFiltered = true;
                var $cjPanel = $('.filter-panel-' + filterCategory + ' .filter-special-classjobs');

                for (var i in filterClassJobs) {
                    var cjId = filterClassJobs[i],
                        $btn = $cjPanel.find('[data-id="' + cjId + '"]');

                    $btn.addClass('active');
                    $btn.parents('.filter-param').addClass('active');
                    SearchFiltersClassJobs.setFilter(filterCategory, cjId);
                }
            }

            // if item attribute filters
            if (filterItemAttributes) {
                this.isFiltered = true;

                var $fPanel = $('.filter-panel-' + filterCategory + ' .filter-special-attributes');
                for (var i in filterItemAttributes) {
                    var data = filterItemAttributes[i].split('|');

                    // populate the form
                    $fPanel.find('select.filter-param-attribute-1').val(data[0]);
                    $fPanel.find('select.filter-param-attribute-2').val(data[1]);
                    $fPanel.find('input.filter-param-attribute-3').val(data[2]);
                    $fPanel.find('select.filter-param-attribute-4').val(data[3]);
                    $fPanel.find('button.filter-param-button').trigger('click');
                }
            }

            // if object filters
            if (filterObject) {
                this.isFiltered = true;

                var $panel = $('.filter-panel[data-filter-type="' + filterCategory + '"]');
                for (var field in filterObject) {
                    var value = filterObject[field],
                        $element = $panel.find('[data-filter-field="' + field + '"]');

                    $element.val(value);
                    $element.trigger('keyup').trigger('change');
                }
            }

            // set the one
            if (filterCategory) {
                this.isFiltered = true;
                Search.setOne(filterCategory);
            }

            // set the one
            if (filterPage) {
                this.isFiltered = true;
                Search.setPage(filterPage);
            }
        }

        //
        // Set the category to the filter button
        //
    }, {
        key: 'setToggleButtonCategory',
        value: function setToggleButtonCategory(category) {
            $(SearchSettings.get('filterToggleClass')).find('strong').text(category.toUpperCase());

            $(SearchSettings.get('filterToggleClass')).attr('data-category', category);
        }

        //
        // Toggle the filters
        //
    }, {
        key: 'togglePanel',
        value: function togglePanel(category) {
            $('.filter-panel-' + category).toggle().toggleClass('open');

            // Click general
            $('.filter-panel-' + category).find('[data-option="general"]').trigger('click');

            // update sticky nav
            SearchUI.updateStickyNav();
        }

        //
        // hide all filters
        //
    }, {
        key: 'hidePanel',
        value: function hidePanel() {
            $('.filter-panel').hide();

            // trigger click on general so that the default filters load correctly.
            $('.filter-panel-options button[data-option="general"]').trigger('click');
        }

        //
        // Handle a filter
        //
    }, {
        key: 'handleFilter',
        value: function handleFilter(event) {
            if (!event || typeof event.target === 'undefined') {
                console.error('No event or target assigned ...');
            }

            // get element
            var $element = $(event.currentTarget),
                $parent = $element.parents('.filter-param'),
                filterType = $element.parents('.filter-panel').attr('data-filter-type'),
                filterField = $element.attr('data-filter-field'),
                filterValue = $element.val();

            // Numeric check
            if ($.isNumeric(filterValue)) {
                filterValue = parseInt(filterValue);
            }

            // if editing a different filter panel than the one active, reset filters
            if (filterValue && this.filterPanelActive && this.filterPanelActive != filterType) {
                this.setFilterType(filterType);
            }

            // force set based on filter value
            var isFilterActive = false;
            $parent.find('input, select').each(function (i, element) {
                if ($(element).val() && $(element).val().length > 0) {
                    isFilterActive = true;
                }
            });

            // if filter active, set active class
            isFilterActive ? $parent.addClass('active') : $parent.removeClass('active');

            // if filter is active, append into filterParameters, otherwise delete
            filterValue.toString().length > 0 ? this.setFilterParameter(filterField, filterValue) : this.deleteFilterParameter(filterField);

            if (this.filterParameters || this.filterItemAttributes) {
                this.isFiltered = true;
            }
        }

        //
        // Set a filter parameter
        //
    }, {
        key: 'setFilterParameter',
        value: function setFilterParameter(key, value) {
            this.filterParameters[key] = value;
            SearchBuilder.add(key, value);
        }

        //
        // Handle a checkbox filter
        //
    }, {
        key: 'handleCheckboxFilter',
        value: function handleCheckboxFilter(event) {
            var $element = $(event.currentTarget),
                $parent = $element.parents('.filter-param'),
                isFilterActive = $element.prop('checked'),
                filterType = $element.parents('.filter-panel').attr('data-filter-type'),
                filterField = $element.attr('data-filter-field');

            // if editing a different filter panel than the one active, reset filters
            if (this.filterPanelActive && this.filterPanelActive != filterType) {
                this.setFilterType(filterType);
            }

            // if filter active, set active class
            isFilterActive ? $parent.addClass('active') : $parent.removeClass('active');

            // if filter is active, append into filterParameters, otherwise delete
            isFilterActive ? this.setFilterParameter(filterField, 'true') : this.deleteFilterParameter(filterField);

            if (this.filterParameters || this.filterItemAttributes) {
                this.isFiltered = true;
            }
        }

        //
        // Set a filter type
        //
    }, {
        key: 'setFilterType',
        value: function setFilterType(filterType) {
            SearchBuilder.reset();

            this.filterParameters = {};
            this.filterItemAttributes = {};
            this.filterPanelActive = null;

            this.resetFilterParameters();
            this.setActiveFilterPanel(filterType);
        }

        //
        // Delete a filter parameter
        //
    }, {
        key: 'deleteFilterParameter',
        value: function deleteFilterParameter(key) {
            delete this.filterParameters[key];
            SearchBuilder.remove(key);
        }

        //
        // Reset filters
        //
    }, {
        key: 'resetFilterParameters',
        value: function resetFilterParameters() {
            this.filterParameters = {};
        }

        //
        // Set active filter panel
        //
    }, {
        key: 'setActiveFilterPanel',
        value: function setActiveFilterPanel(type) {
            this.filterPanelActive = type;
        }

        //
        // Handle filter activation
        //
    }, {
        key: 'isFilterActivated',
        value: function isFilterActivated($parent) {
            var numOfPopulatedChoices = 0;

            $parent.find('input').each(function () {
                if ($(this).val()) {
                    numOfPopulatedChoices++;
                }
            });

            $parent.find('select').each(function () {
                if ($(this).val()) {
                    numOfPopulatedChoices++;
                }
            });

            return numOfPopulatedChoices > 0 ? true : false;
        }

        //
        // Is filtered search
        //
    }, {
        key: 'isFilteredSearch',
        value: function isFilteredSearch() {
            return this.isFiltered;
        }
    }]);

    return SearchFiltersClass;
})();

var SearchFilters = new SearchFiltersClass();

//
// Search Filter Item Attributes
//

var SearchFiltersClassJobsClass = (function () {
    function SearchFiltersClassJobsClass() {
        _classCallCheck(this, SearchFiltersClassJobsClass);

        this.parameters = {};
    }

    //
    // Reset class jobs view
    //

    _createClass(SearchFiltersClassJobsClass, [{
        key: 'reset',
        value: function reset() {
            this.parameters = {};
        }

        //
        // Handle class job filter (the special case)
        //
    }, {
        key: 'handleClassJobFilter',
        value: function handleClassJobFilter(event) {
            var $button = $(event.currentTarget),
                classId = $button.attr('data-id');

            // if exists, remove it
            if (typeof this.parameters[classId] !== 'undefined') {
                $button.removeClass('active');
                this.removeFilter(classId);

                // if no buttons active, make param non active
                var anyActiveButtons = $button.parents(SearchSettings.get('filterParamClass')).find('button.active').length;
                if (!anyActiveButtons) {
                    $button.parents(SearchSettings.get('filterParamClass')).removeClass('active');
                }

                return;
            }

            // set filter type
            var filterType = $button.parents('.filter-panel-items').attr('data-filter-type');

            // add to param list
            this.setFilter(filterType, classId);

            // make button active
            $button.addClass('active');

            // make param block active
            $button.parents(SearchSettings.get('filterParamClass')).addClass('active');
        }

        //
        // Set a class job parameter
        //
    }, {
        key: 'setFilter',
        value: function setFilter(filterType, id) {
            this.parameters[id] = id;
            this.attachFilters(filterType);
        }

        //
        // Remove a filter
        //
    }, {
        key: 'removeFilter',
        value: function removeFilter(id) {
            delete this.parameters[id];
            this.attachFilters();
        }

        //
        // Attach filters to main search
        //
    }, {
        key: 'attachFilters',
        value: function attachFilters(filterType) {
            var classjobs = this.parameters,
                classjobs = Object.toArray(classjobs);

            // if no classjobs, delete them
            if (classjobs.length == 0) {
                SearchFilters.deleteFilterParameter('classjobs');
                this.reset();
                return;
            }

            SearchFilters.setActiveFilterPanel(filterType);
            SearchFilters.setFilterParameter('classjobs', classjobs.join(','));
        }
    }]);

    return SearchFiltersClassJobsClass;
})();

var SearchFiltersClassJobs = new SearchFiltersClassJobsClass();
//
// Search Filter Item Attributes
//

var SearchFiltersItemAttributesClass = (function () {
    function SearchFiltersItemAttributesClass() {
        _classCallCheck(this, SearchFiltersItemAttributesClass);

        this.parameters = {};
    }

    //
    // Reset item attributes
    //

    _createClass(SearchFiltersItemAttributesClass, [{
        key: 'reset',
        value: function reset() {
            this.parameters = {};
            this.toggleAttributeFilters();

            $('.filter-special-attributes-set').empty().html('');
            $('.filter-param-attribute-3').val('1');
        }

        //
        // Handle item attributes filter (the special case)
        //
    }, {
        key: 'handleItemAttributeFilter',
        value: function handleItemAttributeFilter(event) {
            var name = $('.filter-param-attribute-1 option:selected').text(),
                id = $('.filter-param-attribute-1').val(),
                condition = $('.filter-param-attribute-2').val(),
                value = $('.filter-param-attribute-3').val(),
                quality = $('.filter-param-attribute-4').val(),
                key = id + '_' + condition,
                conditionArray = {
                'gt': '>',
                'lt': '<'
            };

            // check if it already exists or not
            if (typeof this.parameters[key] !== 'undefined') {
                return this.updateFilter(id, condition, value, quality);
            }

            // open search filter set
            this.toggleAttributeFilters(true);

            // append template
            var html = SearchTemplater.templateFilterAttributeBLock({
                id: id,
                name: name,
                condition: condition,
                conditionSymbol: conditionArray[condition],
                value: value,
                quality: quality == '1' ? '<img src="' + SearchSettings.get('attributeHQIcon') + '">' : ''
            });

            $('.filter-special-attributes-set').append(html);

            // append onto item attributes
            this.setFilter(id, condition, value, quality);
        }

        //
        // Remove an item attribute
        //
    }, {
        key: 'handleItemAttributeFilterRemoval',
        value: function handleItemAttributeFilterRemoval(event) {
            var $element = $(event.currentTarget);
            filterId = $element.attr('data-filter-value');

            // delete element and remove from attributes
            delete this.parameters[filterId];
            $element.remove();

            // re attach filters
            this.attachFilters();
            ttdrop();
        }

        //
        // Set a item attribute parameter
        //
    }, {
        key: 'setFilter',
        value: function setFilter(id, condition, value, quality) {
            var key = id + '_' + condition,
                value = id + '|' + condition + '|' + value + '|' + quality;

            this.parameters[key] = value;
            this.attachFilters();
        }

        //
        // Update an existing filter
        //
    }, {
        key: 'updateFilter',
        value: function updateFilter(id, condition, value, quality) {
            var key = id + '_' + condition;

            // set quality and value
            $('[data-filter-value="' + key + '"]').find('.filter-param-attribute-name em').html(quality == '1' ? '<img src="' + SearchSettings.get('attributeHQIcon') + '">' : '');

            $('[data-filter-value="' + key + '"]').find('.filter-param-attribute-value').html(value);

            this.setFilter(id, condition, value, quality);
        }

        //
        // Attach filters to main search
        //
    }, {
        key: 'attachFilters',
        value: function attachFilters() {
            var attributes = $.map(this.parameters, function (v) {
                return v;
            });

            // if no attributes, delete them
            if (attributes.length == 0) {
                this.toggleAttributeFilters();
                SearchFilters.deleteFilterParameter('attributes');

                // make inactive
                $(SearchSettings.get('filterItemAttributesClass')).find(SearchSettings.get('filterParamClass')).removeClass('active');

                return;
            }

            SearchFilters.setActiveFilterPanel('items');
            SearchFilters.setFilterParameter('attributes', attributes.join(','));

            // make panel active
            $(SearchSettings.get('filterItemAttributesClass')).find(SearchSettings.get('filterParamClass')).addClass('active');
        }

        //
        // Toggle attribute filters
        //
    }, {
        key: 'toggleAttributeFilters',
        value: function toggleAttributeFilters(isOpen) {
            if (isOpen) {
                $('.filter-special-attributes-empty').hide();
                $('.filter-special-attributes-set').show();
            } else {
                $('.filter-special-attributes-empty').show();
                $('.filter-special-attributes-set').hide();
            }
        }
    }]);

    return SearchFiltersItemAttributesClass;
})();

var SearchFiltersItemAttributes = new SearchFiltersItemAttributesClass();

//
// Search Paging
//

var SearchPagingClass = (function () {
    function SearchPagingClass() {
        _classCallCheck(this, SearchPagingClass);
    }

    _createClass(SearchPagingClass, [{
        key: 'reset',

        //
        // Empty search paging
        //
        value: function reset() {
            $(SearchSettings.get('searchPagingContainerClass')).empty().html('');
        }

        //
        // Render paging
        //
    }, {
        key: 'renderPaging',
        value: function renderPaging(category, paging, totalResults, foundResults) {
            var html = SearchTemplater.templateSearchPaging({
                category: category
            });

            // go through pages
            var buttonsHtml = [];
            for (var i in paging.pages) {
                buttonsHtml.push(SearchTemplater.templateSearchPagingButton({
                    page: paging.pages[i],
                    active: paging.pages[i] == paging.page ? true : false
                }));
            }

            html = html.replace('[[PAGES]]', buttonsHtml.join(''));
            $(SearchSettings.get('searchPagingContainerClass')).append(html);

            // set next, prev and last
            this.setButtons(category, paging);

            // set search info 2
            this.setSearchInfo(category, paging, totalResults, foundResults);
        }

        //
        // Set next, prev and last
        //
    }, {
        key: 'setButtons',
        value: function setButtons(category, paging) {
            var $container = $(SearchSettings.get('searchPagingContainerClass')).find('[data-category="' + category + '"]');

            // previous
            $container.find('.left button:last-child').attr('data-page', paging.prev);

            // next
            $container.find('.right button:first-child').attr('data-page', paging.next);

            // last
            $container.find('.right button:last-child').attr('data-page', paging.total);

            // if current page = first, disable first and previous
            // if current page = last, disable last and next
            $button = $container.find('.left button');
            paging.page == 1 ? $button.addClass('disabled') : $button.removeClass('disabled');

            // if current page = last, disable last and next
            $button = $container.find('.right button');
            paging.page == paging.total ? $button.addClass('disabled') : $button.removeClass('disabled');
        }

        //
        // Set search info 2, specific to the page tab
        //
    }, {
        key: 'setSearchInfo',
        value: function setSearchInfo(category, paging, totalResults, foundResults) {
            var $container = $(SearchSettings.get('searchPagingContainerClass')).find('[data-category="' + category + '"]');
            var duration = ((Date.now() - SearchUI.start) / 1000).toFixed(2);

            var html = SearchTemplater.templateSearchInfo2({
                category: ucwords(category),
                found: foundResults,
                total: number_format(totalResults),
                page: paging.page,
                pages: paging.total,
                duration: duration
            });

            // render html
            $container.find('.search-info').html(html);
        }
    }]);

    return SearchPagingClass;
})();

var SearchPaging = new SearchPagingClass();

//
// Search Render
//

var SearchRenderClass = (function () {
    function SearchRenderClass() {
        _classCallCheck(this, SearchRenderClass);

        this.activeTab = null;
        this.tooltipsTimer = null;
    }

    //
    // Reset search display
    //

    _createClass(SearchRenderClass, [{
        key: 'reset',
        value: function reset() {
            $(SearchSettings.get('searchResultsClass')).empty().html('');
            $(SearchSettings.get('searchResultsNavClass')).empty().html('');
            this.activeTab = null;
        }

        //
        // Reset the active tab
        //
    }, {
        key: 'resetActiveTab',
        value: function resetActiveTab() {
            this.activeTab = null;
        }

        //
        // Set a tab active
        //
    }, {
        key: 'setActiveTab',
        value: function setActiveTab(category) {
            if (category == this.activeTab) {
                return;
            }

            this.activeTab = category;

            // remove any active tabs
            $(SearchSettings.get('searchResultsNavClass')).find('span[data-category].active').removeClass('active');
            $(SearchSettings.get('searchResultsClass')).find('.search-results-group.active').removeClass('active');
            $(SearchSettings.get('searchPagingContainerClass')).find('.search-one-paging.active').removeClass('active');

            // set tab active
            $(SearchSettings.get('searchResultsNavClass')).find('span[data-category="' + category + '"]').addClass('active');
            $(SearchSettings.get('searchResultsClass')).find('.search-results-group-' + category).addClass('active');
            $(SearchSettings.get('searchPagingContainerClass')).find('.search-one-paging[data-category="' + category + '"]').addClass('active');

            // set filter toggle button
            SearchFilters.setToggleButtonCategory(category);

            // get tooltips, delay to give time for render to become visible in browser
            clearTimeout(this.tooltipsTimer);
            this.tooltipsTimer = setTimeout(function () {
                if (typeof XIVDBTooltips !== 'undefined') {
                    XIVDBTooltips.get();
                    SearchUI.updateStickyNav();
                }
            }, 100);

            // if to hide patch list or not
            category == 'characters' ? $('.filter-param-patches').hide() : $('.filter-param-patches').show();
        }

        //
        // Render a search tab
        //
    }, {
        key: 'renderSearchTab',
        value: function renderSearchTab(category, title, total) {
            var id = SearchSettings.get('searchResultsNavClass'),
                html = SearchTemplater.templateSearchTab({
                category: category,
                title: title,
                total: number_format(total)
            });

            // render search tabs
            $(id).append(html);
        }

        //
        // Render a search group
        //
    }, {
        key: 'renderSearchGroup',
        value: function renderSearchGroup(category) {
            $(SearchSettings.get('searchResultsClass')).append('<div class="search-results-group search-results-group-' + category + '"></div>');
        }

        //
        // Render search results entities
        //
    }, {
        key: 'renderSearchResults',
        value: function renderSearchResults(category, results) {
            var id = '.search-results-group-' + category,
                html = [];

            for (var i in results) {
                if (typeof SearchContent[category] !== 'undefined') {
                    var data = SearchContent[category](results[i]);
                    html.push(SearchTemplater.templateSearchEntity(data));
                }
            }

            $(id).html(html.join(''));
        }
    }]);

    return SearchRenderClass;
})();

var SearchRender = new SearchRenderClass();

//
// Search Settings
//

var SearchSettingsClass = (function () {
    function SearchSettingsClass() {
        _classCallCheck(this, SearchSettingsClass);

        this.settings = {
            searchAutoEnabled: 'on',
            searchInputDelay: 1000,
            searchResultsLimit: 60,
            searchStickyNav: 'on',
            searchFlexbox: 'on',
            searchStrict: 'off',
            searchInputClass: '.search input.core-search',
            searchInputGlass: '.search button',
            searchLoaderClass: '.search-loading',
            searchContentClass: '.search-content',
            searchResultsClass: '.search-results',
            searchResultsNavClass: '.search-results-nav',
            searchHeaderClass: '.search-header',
            searchPagingContainerClass: '.search-paging',
            searchViewClass: '.search-view-options > button',
            searchNoResultsClass: '.search-no-results',
            searchExtendedToggle: '.search-filter-options > button.filter-extend',
            searchInteractionClass: '.search-interaction',
            searchToggleToolsClass: '.search-header button#toggleSearchTools',
            searchToggleOptionsClass: '.search-header button#toggleSearchOptions',

            filterToggleClass: '.filter-toggle',
            filterParamClass: '.filter-param',
            filterItemAttributesClass: '.filter-special-attributes',
            filterClassJobsClass: '.filter-special-classjobs',
            filterSearchButtonClass: '.filter-panel-footer .filter-search',
            filterClearButtonClass: '.filter-panel-footer .filter-reset',

            filterPanelOptions: '.filter-panel-options',
            filterPanelTabs: '.filter-panel-tabs',

            siteContentsClass: '.site-container',
            attributeHQIcon: '/img/ui/hq.png'
        };
    }

    //
    // Get a search setting
    //

    _createClass(SearchSettingsClass, [{
        key: 'get',
        value: function get(option) {
            return this.settings[option];
        }

        //
        // Set an option
        //
    }, {
        key: 'set',
        value: function set(option, value) {
            if (value) {
                this.settings[option] = value;
            }

            return;
        }
    }]);

    return SearchSettingsClass;
})();

var SearchSettings = new SearchSettingsClass();

//
// Search engine templater, to replace handlebars
//

var SearchTemplaterClass = (function () {
    function SearchTemplaterClass() {
        _classCallCheck(this, SearchTemplaterClass);
    }

    _createClass(SearchTemplaterClass, [{
        key: 'templateSearchEntity',

        //
        // Search result entities
        //
        value: function templateSearchEntity(data) {
            var html = '\n\t\t<div class="entity {{color1}}" data-xivdb-seturlname="0" data-xivdb-seturlcolor="0" data-xivdb-seturlicon="0" data-id="' + data.id + '">\n\t        <a class="icon" href="' + data.url + '" data-xivdb-parent=".entity"><img src="/img/loader/loading2.gif" data-src="' + data.icon + '"></a>\n\t        <div class="data">\n\t            <div class="name {{color2}}"><a href="' + data.url + '" data-xivdb-parent=".entity">' + data.name + '</a></div>\n\t            <div class="extra">' + data.extra + '</div>\n\t        </div>\n\t    </div>';

            html = html.replace('{{color1}}', data.color ? 'entity-rarity-' + data.color : '');
            html = html.replace('{{color2}}', data.color ? 'rarity-' + data.color : '');

            return html;
        }

        //
        // Search tabs
        //
    }, {
        key: 'templateSearchTab',
        value: function templateSearchTab(data) {
            var html = '<span data-category="' + data.category + '">\n\t\t\t<i>' + data.total + '</i> ' + data.title + '\n\t\t</span>';

            return html;
        }

        //
        // Attribute filter bubble
        //
    }, {
        key: 'templateFilterAttributeBLock',
        value: function templateFilterAttributeBLock(data) {
            var html = '\n\t\t\t<span class="filter-param-attribute-block" data-filter-value="' + data.id + '_' + data.condition + '" data-tt="' + languages.custom(716) + '">\n\t\t        <span class="filter-param-attribute-name"><em>' + data.quality + '</em> ' + data.name + '</span>\n\t\t        <span class="filter-param-attribute-condition">' + data.conditionSymbol + '</span>\n\t\t        <span class="filter-param-attribute-value">' + data.value + '</span>\n\t\t    </span>\n\t\t';

            return html;
        }

        //
        // Paging
        //
    }, {
        key: 'templateSearchPaging',
        value: function templateSearchPaging(data) {
            return '\n\t\t\t<div class="search-one-paging" data-category="' + data.category + '">\n                <div class="search-paging-container">\n\t\t\t\t\t<span class="left">\n\t\t\t\t\t\t<button type="button" data-tt="Go the first page" data-page="1">' + languages.custom(717) + '</button>\n\t\t\t\t\t\t<button type="button" data-tt="Go the previous page"><i class="fa fa-chevron-left"></i></button>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="center">[[PAGES]]</span>\n\t\t\t\t\t<span class="right">\n\t\t\t\t\t\t<button type="button" data-tt="Go to the next page"><i class="fa fa-chevron-right"></i></button>\n\t\t\t\t\t\t<button type="button" data-tt="Go to the last page">' + languages.custom(718) + '</button>\n\t\t\t\t\t</span>\n\t\t        </div>\n\n\t\t        <div class="search-info">\n\t\t            ' + data.category + '\n\t\t        </div>\n\t\t    </div>\n\t\t';
        }

        //
        // Paging button
        //
    }, {
        key: 'templateSearchPagingButton',
        value: function templateSearchPagingButton(data) {
            var active = data.active ? 'active' : '';
            return '<button type="button" class="' + active + '" data-page="' + data.page + '">' + data.page + '</button>';
        }
    }, {
        key: 'templateSearchInfo1',
        value: function templateSearchInfo1(data) {
            return '<span>' + data.total + '</span> results';
        }
    }, {
        key: 'templateSearchInfo2',
        value: function templateSearchInfo2(data) {
            var html = '\n\t\t<span>' + data.category + '</span>\n\t    &nbsp;-&nbsp;\n\t\t' + languages.custom(936) + '\n\t    &nbsp;-&nbsp;\n\t\t' + languages.custom(937) + '\n\t    <em>(' + data.duration + 's)</em>\n\t\t';

            html = html.replace('{{ found }}', data.found);
            html = html.replace('{{ total }}', data.total);
            html = html.replace('{{ page }}', data.page);
            html = html.replace('{{ pages }}', data.pages);

            return html;
        }
    }]);

    return SearchTemplaterClass;
})();

var SearchTemplater = new SearchTemplaterClass();

//
// Search Tab Title
//

var SearchTitleClass = (function () {
    function SearchTitleClass() {
        _classCallCheck(this, SearchTitleClass);

        this.title = 'Search - ' + SITETITLE;
    }

    //
    // Set the title text to something (configed, not visually)
    //

    _createClass(SearchTitleClass, [{
        key: 'set',
        value: function set(text) {
            this.title = text + ' - ' + SITETITLE;
        }

        //
        // Show a title
        //
    }, {
        key: 'show',
        value: function show() {
            document.title = this.title;
        }

        //
        // Show a title before a main title
        //
    }, {
        key: 'preShow',
        value: function preShow(text) {
            document.title = text + ' - ' + SITETITLE;
        }
    }]);

    return SearchTitleClass;
})();

var SearchTitle = new SearchTitleClass();
//
// Search UI
//

var SearchUIClass = (function () {
    function SearchUIClass() {
        _classCallCheck(this, SearchUIClass);

        this.start = 0;
        this.view = 'grid';
    }

    //
    // Hide all active panels
    //

    _createClass(SearchUIClass, [{
        key: 'hideAllActivePanels',
        value: function hideAllActivePanels(exclude) {
            if (exclude != 'cart') {
                CartUI.close();
            }

            if (exclude != 'wardrobe') {
                WardrobeUI.close();
            }

            if (exclude != 'options') {
                $(SearchSettings.get('searchToggleOptionsClass')).removeClass('active');
                $('.search-options').removeClass('open');
            }

            if (exclude != 'tools') {
                $(SearchSettings.get('searchToggleToolsClass')).removeClass('active');
                $('.search-tools').removeClass('open');
            }

            return this;
        }

        //
        // Open a search panel
        //
    }, {
        key: 'togglePanel',
        value: function togglePanel(className) {
            $(className).toggleClass('open');
            return this;
        }

        //
        // Scroll to the search
        //
    }, {
        key: 'scrollToSearch',
        value: function scrollToSearch() {
            $('html, body').scrollTop($(SearchSettings.get('searchHeaderClass')).offset().top);
            return this;
        }

        //
        // Get the text in the search input
        //
    }, {
        key: 'getInputText',
        value: function getInputText() {
            return $(SearchSettings.get('searchInputClass')).val().trim();
        }

        //
        // Reset the text input
        //
    }, {
        key: 'resetInputText',
        value: function resetInputText() {
            $(SearchSettings.get('searchInputClass')).val('');
            return this;
        }

        //
        // Toggle the Search Loading popup
        //
    }, {
        key: 'toggleSearchLoader',
        value: function toggleSearchLoader(isShow) {
            if (isShow) {
                $(SearchSettings.get('searchLoaderClass')).show();
                return this;
            }

            $(SearchSettings.get('searchLoaderClass')).hide();
            return this;
        }

        //
        // Show search results
        //
    }, {
        key: 'showSearchResults',
        value: function showSearchResults() {
            $(SearchSettings.get('siteContentsClass')).hide();
            $(SearchSettings.get('searchContentClass')).show();
            return this;
        }

        //
        // Start timer
        //
    }, {
        key: 'setTimer',
        value: function setTimer() {
            this.start = Date.now();
            return this;
        }

        //
        // Show results info
        //
    }, {
        key: 'showResultsInfo',
        value: function showResultsInfo(found, total) {
            found = number_format(found);
            total = number_format(total);

            $('.search-numbers').html(SearchTemplater.templateSearchInfo1({
                total: total,
                found: found
            }));

            return this;
        }

        //
        // Change the search view
        //
    }, {
        key: 'setSearchView',
        value: function setSearchView(view) {
            // if no view passed, try loading from local storage
            if (!view) {
                view = localStorage.getItem('searchView', view);
                if (view) {
                    this.setSearchView(view);
                }
                return this;
            }

            // change view
            var $section = $(SearchSettings.get('searchResultsClass'));
            $section.removeClass('grid').removeClass('list');
            $section.addClass(view);

            // set buttons
            $(SearchSettings.get('searchHeaderClass')).find('button[data-search-view].active').removeClass('active');
            $(SearchSettings.get('searchHeaderClass')).find('[data-search-view="' + view + '"]').addClass('active');

            localStorage.setItem('searchView', view);
            this.view = view;
            return this;
        }

        //
        // Set filter view
        //
    }, {
        key: 'setFilterView',
        value: function setFilterView() {
            return this;
        }

        //
        // Get the current searchview
        //
    }, {
        key: 'getSearchView',
        value: function getSearchView() {
            return this.view;
        }

        //
        // Show the no results banner
        //
    }, {
        key: 'showNoResults',
        value: function showNoResults() {
            $(SearchSettings.get('searchResultsNavClass')).hide();
            $(SearchSettings.get('searchResultsClass')).hide();
            $(SearchSettings.get('searchNoResultsClass')).show();
            return this;
        }

        //
        // Hide the no results banner
        //
    }, {
        key: 'hideNoResults',
        value: function hideNoResults() {
            $(SearchSettings.get('searchResultsNavClass')).show();
            $(SearchSettings.get('searchResultsClass')).show();
            $(SearchSettings.get('searchNoResultsClass')).hide();
            return this;
        }

        //
        // Toggle extended filters
        //
    }, {
        key: 'toggleExtendedFilters',
        value: function toggleExtendedFilters(enable) {
            if (enable) {
                $('.filter-panel-options').hide();
                $('.filter-panel-tabs').addClass('active');
            } else {
                $('.filter-panel-options').show();
                $('.filter-panel-tabs').removeClass('active');
                $('.filter-panel-options button:first-of-type').addClass('active');
                $('.filter-panel-tabs[data-tab="general"]').addClass('active');
            }
        }

        // -------------------------------------------------------
        // Sticky Nav
        // -------------------------------------------------------

        //
        // Set sticky nav
        //
    }, {
        key: 'setStickyNav',
        value: function setStickyNav() {
            if (!isOnMobile() && SearchSettings.get('searchStickyNav') == 'on') {
                $(SearchSettings.get('searchInteractionClass')).sticky({
                    topSpacing: 0,
                    zIndex: 100
                });
            }
            return this;
        }

        //
        // Update sticky
        //
    }, {
        key: 'updateStickyNav',
        value: function updateStickyNav() {
            if (isOnMobile()) {
                return this;
            }

            $(SearchSettings.get('searchInteractionClass')).sticky('update');
            return this;
        }

        //
        // Remove sticky
        //
    }, {
        key: 'removeStickyNav',
        value: function removeStickyNav() {
            if (isOnMobile()) {
                return this;
            }

            $(SearchSettings.get('searchInteractionClass')).unstick();
            return this;
        }
    }]);

    return SearchUIClass;
})();

var SearchUI = new SearchUIClass();

//
// Search Url
//

var SearchUrlClass = (function () {
    function SearchUrlClass() {
        _classCallCheck(this, SearchUrlClass);

        this.search = null;
        this.filters = null;
        this.hasPushed = false;
        this.popReady = false;

        // popstate, don't do it on mobile
        if (!isOnMobile()) {
            window.onpopstate = function (event) {
                if (this.popReady) {
                    // force page reload so filters pre-populate
                    window.location = window.location.href;
                }
            };
        }
    }

    //
    // Reset the url
    //

    _createClass(SearchUrlClass, [{
        key: 'reset',
        value: function reset() {
            window.history.replaceState(null, null, '/');
        }

        //
        // Set the url
        //
    }, {
        key: 'set',
        value: function set() {
            var parameters = SearchBuilder.get(),
                string = parameters.string;

            delete parameters['language'];

            // split spaces by pluses
            string = string ? string.replace(/ /g, '+') : null;

            // Remove string as it will be added as a different parameter
            delete parameters.string;

            // serialise the object
            var serialise = $.param(parameters);

            // build Url
            var url = this.buildUrl(string, serialise);

            // pop ready
            this.popReady = true;
        }

        //
        // Set search
        //
    }, {
        key: 'setSearch',
        value: function setSearch(search) {
            this.search = search;
        }

        //
        // Set filters
        //
    }, {
        key: 'setFilters',
        value: function setFilters(filters) {
            this.filters = filters;
        }

        //
        // Set initial state
        //
    }, {
        key: 'setInitialState',
        value: function setInitialState() {
            Search.runQuery();
        }

        //
        // Build search url
        //
    }, {
        key: 'buildUrl',
        value: function buildUrl(string, filters) {
            // setup url parameters
            var urlParameters = [];

            // if string
            if (string && string.length > 0) {
                string = string ? string.replace(/ /g, '+') : null;
                urlParameters.push('search=' + string);
            }

            // if filters
            if (filters) {
                filters = btoa(unescape(encodeURIComponent(filters)), true);
                urlParameters.push('filters=' + filters);
            }

            // prepare the url string
            var urlString = urlParameters.join('&'),
                urlString = urlString.length > 1 ? '/?' + urlString : '/';

            // on first one just replace
            if (!this.hasPushed) {
                this.hasPushed = true;
                return window.history.replaceState(null, null, urlString);
            }

            // push history
            window.history.pushState(null, null, urlString);
        }

        //
        // Reload values
        //
    }, {
        key: 'reloadSearchValues',
        value: function reloadSearchValues() {
            if (this.search) {
                $(SearchSettings.get('searchInputClass')).val(this.search);
                Search.setString();
            }

            if (this.filters) {
                var filters = this.filters;

                // base64 > escape > decode
                filters = decodeURIComponent(escape(atob(filters, true)));

                // replace all left over encodes
                filters = decodeURIComponent(filters);

                // split
                filters = filters.split('&');

                // reload filters
                SearchFilters.reload(filters);
            }

            // If either search or filters
            if (this.search || this.filters) {
                // Search
                Search.runQuery();
            }
        }
    }]);

    return SearchUrlClass;
})();

var SearchUrl = new SearchUrlClass();

//
// Shopping Cart Events
//

var CartClass = (function () {
    function CartClass() {
        _classCallCheck(this, CartClass);

        this.cssOpenButton = '[data-tool="shoppingcart"]';
        this.cssCartPanel = '.tool-cart';
        this.cssSearchLinks = '.search-results a';
        this.cssRemoveItem = '.tool-cart .tool-cart-items .cart-item button#remove';
        this.cssQuantity = '.tool-cart .tool-cart-items .cart-item input#quantity';
        this.cssCheckout = '.tool-cart button.tool-cart-checkout';
    }

    // Watch for events

    //
    // Watch for events
    //

    _createClass(CartClass, [{
        key: 'watch',
        value: function watch() {
            var _this14 = this;

            // shoppign cart icon clicked, which either opens
            // or closes the tool, based on visibility
            $('html').on('click', this.cssOpenButton, function (event) {
                $(_this14.cssCartPanel).hasClass('open') ? CartUI.close() : CartUI.open();
            });

            // listen on search results being clicked, if the cart is open, prevent going
            // to the page as it could of been accidental
            $('html').on('click', this.cssSearchLinks, function (event) {
                if ($(_this14.cssCartPanel).hasClass('open')) {
                    event.preventDefault();
                }
            });

            // on removing an item
            $('html').on('click', this.cssRemoveItem, function (event) {
                var id = $(event.currentTarget).attr('data-item-id');
                CartItems.remove(id);
            });

            // on quantity change
            $('html').on('keyup', this.cssQuantity, function (event) {
                var id = $(event.currentTarget).attr('data-item-id'),
                    value = $(event.currentTarget).val();

                CartItems.updateQuantity(id, value);
            });

            // on checkout button!
            $('html').on('click', this.cssCheckout, function (event) {
                _this14.checkout();
            });

            // on clicking menu button
            $('html').on('click', '[data-action="shopping-cart"]', function (event) {
                $('.dropdown-container').hide();
                CartUI.open();
            });
        }

        //
        // Checkout with the items!!!
        //
    }, {
        key: 'checkout',
        value: function checkout() {
            // get items
            var items = CartItems.get();

            // generate url
            var url = [];
            for (var i in items) {
                var item = items[i];

                // ensure correct quantity
                if (item.quantity > 0 && item.quantity < 999) {
                    url.push(item.id + 'x' + item.quantity);
                }
            }

            // only checkout if we have items
            if (url.length > 0) {
                // go to url
                url = 'shopping-cart/' + url.join('-');
                window.location = url;
            }
        }

        //
        // Is cart open?
        //
    }, {
        key: 'isOpen',
        value: function isOpen() {
            return $(this.cssCartPanel).hasClass('open');
        }
    }]);

    return CartClass;
})();

var Cart = new CartClass();
$(function () {
    Cart.watch();
});

//
// Shopping Cart Items
//

var CartItemsClass = (function () {
    function CartItemsClass() {
        _classCallCheck(this, CartItemsClass);

        this.items = {};
        this.cssDropZone = '.tool-cart-items';
        this.cssCheckoutButton = '.tool-cart-checkout';
    }

    // Watch for events

    //
    // Get the items
    //

    _createClass(CartItemsClass, [{
        key: 'get',
        value: function get() {
            return this.items;
        }

        //
        // Add an item to the cart
        //
    }, {
        key: 'add',
        value: function add(item) {
            // if item already exists, then do nothing
            if (this.items[item.id]) {
                return;
            }

            // add to object
            this.items[item.id] = item;

            // hide dropzone title
            $(this.cssDropZone).find('em').hide();

            // enable checkout button
            $(this.cssCheckoutButton).removeClass('disabled');

            // generate cart item html
            var html = _render('#ui-cart-item', item);

            // add item to cart visually
            $(this.cssDropZone).append(html);
        }

        //
        // Remove an item
        //
    }, {
        key: 'remove',
        value: function remove(id) {
            delete this.items[id];
            $('#cartitem' + id).remove();

            // if no items, show the em text
            if (Object.size(this.items) == 0) {
                $(this.cssDropZone).find('em').show();
                $(this.cssCheckoutButton).addClass('disabled');
            }

            // drop tooltips
            ttdrop();
        }

        //
        // Update an item quantity
        //
    }, {
        key: 'updateQuantity',
        value: function updateQuantity(id, value) {
            this.items[id].quantity = parseInt(value);
        }
    }]);

    return CartItemsClass;
})();

var CartItems = new CartItemsClass();

//
// Shopping Cart UI
//

var CartUIClass = (function () {
    function CartUIClass() {
        _classCallCheck(this, CartUIClass);

        this.cssOpenButton = '[data-tool="shoppingcart"]';
        this.cssCartPanel = '.tool-cart';
        this.cssDraggableIcons = '.search-results .search-results-group-items .entity';
        this.cssDropZone = '.tool-cart';
        this.isOpen = false;
    }

    // Watch for events

    //
    // Open shopping cart tool
    //

    _createClass(CartUIClass, [{
        key: 'open',
        value: function open() {
            // hide all open panels
            SearchUI.hideAllActivePanels('cart');

            // set as open
            this.isOpen = true;
            this.setIconsDraggable();
            $(this.cssCartPanel).addClass('open');
            $(this.cssOpenButton).addClass('enabled');

            // make shopping cart panel droppable
            $(this.cssDropZone).droppable({
                accept: this.cssDraggableIcons,
                activeClass: 'tool-cart-dropzone-active',
                hoverClass: 'tool-cart-dropzone-hover',
                drop: function drop(event, ui) {
                    var $droppedItem = $(ui.draggable);

                    // get item data
                    var item = {
                        id: $droppedItem.attr('data-id'),
                        name: $droppedItem.find('.data .name').text(),
                        icon: $droppedItem.find('.icon img').attr('src'),
                        quantity: 1
                    };

                    CartItems.add(item);
                }
            });

            // Set search
            // Set search
            if (Search.theone != 'items') {
                Search.setOne('items').setPage(1);
            }

            Search.setString().runQuery();
            SearchUI.updateStickyNav();
        }

        //
        // Close shopping cart tool
        //
    }, {
        key: 'close',
        value: function close() {
            if (this.isOpen) {
                this.isOpen = false;
                $(this.cssCartPanel).removeClass('open');
                $(this.cssOpenButton).removeClass('enabled');
                $(this.cssDraggableIcons).removeClass('cart-draggable').draggable('destroy');
            }
        }

        //
        // Attach draggable
        //
    }, {
        key: 'setIconsDraggable',
        value: function setIconsDraggable() {
            // make icons draggable
            $(this.cssDraggableIcons).addClass('cart-draggable').draggable({
                containment: 'html',
                revert: true,
                revertDuration: 0,
                start: function start() {
                    ttdrop();

                    if (typeof XIVDBTooltips !== 'undefined') {
                        XIVDBTooltips.hide();
                    }
                }
            });
        }
    }]);

    return CartUIClass;
})();

var CartUI = new CartUIClass();

//
// Shopping Cart - Checkout
//

var CheckoutClass = (function () {
    function CheckoutClass() {
        _classCallCheck(this, CheckoutClass);

        this.cssListEntityButtonToggle = '.list-entity button.toggle';
        this.cssListEntityButtonFind = '.list-entity button.find';
        this.cssWindowMinifyButton = '.tool-cart-page .tool-toggle-window';
        this.cssBasketItem = '.right.tool-basket button';
        this.cssToolInputs = '.tool-cart-page input';
        this.cssHqButtons = '.list-entity button.hqbtn';
        this.cssSaveButton = '.action-bar button.save-cart';
        this.cssLoadButton = '.action-bar button.load-cart';
    }

    // Watch for events

    _createClass(CheckoutClass, [{
        key: 'watch',
        value: function watch() {
            //
            // Toggle the visibility of one of the detailed items
            // when viewing an item in the basket
            //
            $('html').on('click', this.cssListEntityButtonToggle, function (event) {
                var id = $(event.currentTarget).attr('data-id');
                CheckoutUI.toggleTableRow(id);
            });

            //
            // Find detail information about a detailed item
            //
            $('html').on('click', this.cssListEntityButtonFind, function (event) {
                var id = $(event.currentTarget).attr('data-id');
                CheckoutFind.find(id);
            });

            //
            // Toggle which view should be shown in the tool window
            //
            $('html').on('click', this.cssBasketItem, function (event) {
                var id = $(event.currentTarget).attr('data-view');
                CheckoutUI.switchView(id);
            });

            //
            // Event for whenever an input keyup is done
            //
            $('html').on('keyup', this.cssToolInputs, function (event) {
                var $input = $(event.currentTarget);

                // if it's an entity
                if ($input.attr('data-var') == 'entityCost') {
                    var id = $input.parents('.list-entity').attr('data-id'),
                        costClass = $input.hasClass('costhq') ? 'costhq' : 'cost',
                        value = $input.val().trim();

                    // find other inputs
                    $('.list-entity[data-id="' + id + '"] input.' + costClass + ':not(:focus)').val(value);
                }

                CheckoutMath.calculate();
            });

            //
            // Toggle a crafting tier in the cart
            //
            $('html').on('click', this.cssWindowMinifyButton, function (event) {
                var $button = $(event.currentTarget),
                    $parent = $button.parents('.list-block').find('.list-data'),
                    $notice = $button.parents('.list-block').find('.list-notice'),
                    open = $button.attr('data-open') == '1' ? true : false;

                if (open) {
                    $button.attr('data-open', 0);
                    $parent.hide();
                    $notice.show();
                    return;
                }

                $button.attr('data-open', 1);
                $parent.show();
                $notice.hide();
            });

            //
            // Toggle HQ
            //
            $('html').on('click', this.cssHqButtons, function (event) {
                var $button = $(event.currentTarget),
                    on = $button.hasClass('on');

                // set status if on or off
                on ? $button.removeClass('on') : $button.addClass('on');

                // get cost inputs
                var $nqInput = $button.parents('.list-entity').find('.cost');
                $hqInput = $button.parents('.list-entity').find('.costhq');

                // remove inactive on both
                $nqInput.removeClass('inactive');
                $hqInput.removeClass('inactive');

                // set inactive on non used input
                on ? $hqInput.addClass('inactive') : $nqInput.addClass('inactive');

                // recalculate
                CheckoutMath.calculate();
            });

            //
            // On Save open
            //
            $('html').on('click', this.cssSaveButton, function (event) {
                $('.panel-save').toggleClass('open');
            });

            //
            // On Save open
            //
            $('html').on('click', this.cssLoadButton, function (event) {
                $('.panel-load').toggleClass('open');
            });

            //
            // Tabs
            //
            $('html').on('click', '.tool-cart-tabs button', function (event) {
                var tab = $(event.currentTarget).attr('data-tab');

                $('.tool-cart-tabs-page.active, .tool-cart-tabs button.active').removeClass('active');
                $('.tool-cart-tabs-page[data-tab="' + tab + '"], .tool-cart-tabs button[data-tab="' + tab + '"]').addClass('active');
            });
        }
    }]);

    return CheckoutClass;
})();

var Checkout = new CheckoutClass();
$(function () {
    Checkout.watch();
    CheckoutStorage.load();
});

//
// Shopping Cart - CheckoutFind
//

var CheckoutFindClass = (function () {
    function CheckoutFindClass() {
        _classCallCheck(this, CheckoutFindClass);

        this.cssFindPlaceholder = '.tool-cart-placeholder';
        this.cssFindLoading = '.tool-cart-loader';
        this.cssMaterialDetails = '.cart-material-details';
        this.cssMaterialTemplate = '#ui-cart-material-details';
        this.cssCraftTreeRow = '#ui-cart-tree-row';
    }

    // Watch for events

    //
    // Find information about an item clicked
    //

    _createClass(CheckoutFindClass, [{
        key: 'find',
        value: function find(id) {
            var _this15 = this;

            // hide tooltips
            if (typeof XIVDBTooltips !== 'undefined') {
                XIVDBTooltips.hide();
            }

            this.loading(1);

            $.ajax({
                url: API_URL + '/item/' + id,
                data: {
                    language: LANGUAGE
                },
                cache: false,
                dataType: 'json',
                method: 'GET',
                success: function success(data) {
                    _this15.renderDetails(data);
                },
                error: function error(data, status, _error11) {
                    console.error(data, status, _error11);
                },
                complete: function complete() {
                    _this15.loading(2);

                    if (typeof XIVDBTooltips !== 'undefined') {
                        XIVDBTooltips.getDelayed();
                    }
                }
            });
        }

        //
        // Render details
        //
    }, {
        key: 'renderDetails',
        value: function renderDetails(item) {
            // generate cart item html
            var html = _render(this.cssMaterialTemplate, item);

            // add item to cart vissually
            $(this.cssMaterialDetails).html(html);

            // if synth tree
            if (item.craftable && typeof item.craftable[0] !== 'undefined') {
                this.renderCraftingTree(item.craftable[0], 1);
            }
        }

        //
        // Render a crafting tree (Recurrsive)
        //
    }, {
        key: 'renderCraftingTree',
        value: function renderCraftingTree(recipe, tier) {
            for (var i in recipe._tree) {
                // get material
                var material = recipe._tree[i];
                material.tier = tier;

                // row html
                var html = _render(this.cssCraftTreeRow, material);

                // append to tree
                $(this.cssMaterialDetails).find('.cart-extended-tree').append(html);

                // if sub tree
                if (typeof material._synths !== 'undefined') {
                    var synthId = Object.keys(material._synths)[0];
                    synthNext = material._synths[synthId];

                    this.renderCraftingTree(synthNext, tier + 1);
                }
            }
        }

        //
        // Set loading
        //
    }, {
        key: 'loading',
        value: function loading(state) {
            if (state == 1) {
                $(this.cssFindPlaceholder).addClass('off');
                $(this.cssFindLoading).addClass('on');
                $(this.cssMaterialDetails).addClass('off');
                return;
            } else if (state == 2) {
                $(this.cssMaterialDetails).removeClass('off');
                $(this.cssFindLoading).removeClass('on');
                return;
            }

            $(this.cssFindPlaceholder).removeClass('off');
            $(this.cssFindLoading).removeClass('on');
        }
    }]);

    return CheckoutFindClass;
})();

var CheckoutFind = new CheckoutFindClass();

//
// Shopping Cart - CheckoutMath
//

var CheckoutMathClass = (function () {
    function CheckoutMathClass() {
        _classCallCheck(this, CheckoutMathClass);

        this.costs = [];
        this.costsTotal = 0;

        this.profits = [];
        this.profitsTotal = 0;
    }

    //
    // Run calculations!
    //

    _createClass(CheckoutMathClass, [{
        key: 'calculate',
        value: function calculate() {
            this.costs = [];
            this.costsTotal = 0;
            this.profits = [];
            this.profitsTotal = 0;

            // get costs
            this.getCosts();

            // get profits
            this.getProfits();
            this.profitsTotal = this.profitsTotal - this.costsTotal;

            // run figures
            this.runFigures();

            // Saving
            CheckoutStorage.save();
        }

        //
        // Get all costs
        //
    }, {
        key: 'getCosts',
        value: function getCosts() {
            var _this16 = this;

            var $rows = $('.tool-cart-window-all table tr');

            // loop through each rows
            $rows.each(function (i, element) {
                // get row
                var $row = $(element),
                    id = $row.attr('data-id');

                // cost data
                var data = {
                    id: id,
                    quantity: 0,
                    cost: 0
                };

                // quantity
                data.quantity = parseInt($row.find('input.quantity').val());

                // cost by default is nq cost
                data.cost = parseInt($row.find('input.cost').val());

                // if nq is inactive
                if ($row.find('input.cost').hasClass('inactive')) {
                    data.cost = parseInt($row.find('input.costhq').val());
                }

                // fix some values
                if (isNaN(data.quantity)) data.quantity = 0;
                if (isNaN(data.cost)) data.cost = 0;

                // multiply cost by quantity
                data.cost = data.cost * data.quantity;

                // set values
                _this16.costsTotal = _this16.costsTotal + data.cost;
                _this16.costs.push(data);
            });
        }

        //
        // Get all profits
        //
    }, {
        key: 'getProfits',
        value: function getProfits() {
            var _this17 = this;

            var $rows = $('.right.tool-basket div.item');

            // loop through each rows
            $rows.each(function (i, element) {
                // get row
                var $row = $(element),
                    id = $row.attr('data-id');

                // cost data
                var data = {
                    id: id,
                    nqQuantity: 0,
                    hqQuantity: 0,
                    nqCost: 0,
                    hqCost: 0
                };

                // get quantity and costs
                data.nqQuantity = parseInt($row.find('input.final_quantity').val());
                data.hqQuantity = parseInt($row.find('input.final_quantity_hq').val());
                data.nqCost = parseInt($row.find('input.final_sale').val());
                data.hqCost = parseInt($row.find('input.final_sale_hq').val());

                // fix some values
                if (isNaN(data.nqQuantity)) data.nqQuantity = 0;
                if (isNaN(data.hqQuantity)) data.hqQuantity = 0;
                if (isNaN(data.nqCost)) data.nqCost = 0;
                if (isNaN(data.hqCost)) data.hqCost = 0;

                // multiply cost by quantity
                data.nqCost = data.nqCost * data.nqQuantity;
                data.hqCost = data.hqCost * data.hqQuantity;

                // set values
                _this17.profitsTotal = _this17.profitsTotal + (data.nqCost + data.hqCost);
                _this17.profits.push(data);
            });
        }

        // run figures and work out profit/loss
    }, {
        key: 'runFigures',
        value: function runFigures() {
            // set profit values
            $('.final-cost em').text(number_format(this.costsTotal));
            $('.final-profit em').text(number_format(this.profitsTotal));

            // remove color values
            $('.final-profit em').removeClass('positive').removeClass('negative');

            // set color based on if in profit or not.
            $('.final-profit em').addClass(this.profitsTotal > 0 ? 'positive' : 'negative');
        }
    }]);

    return CheckoutMathClass;
})();

var CheckoutMath = new CheckoutMathClass();

//
// Shopping Cart - CheckoutStorage
//

var CheckoutStorageClass = (function () {
    function CheckoutStorageClass() {
        _classCallCheck(this, CheckoutStorageClass);

        this.itemCosts = {};
        this.itemProfits = {};
    }

    //
    // Load cart values
    //

    _createClass(CheckoutStorageClass, [{
        key: 'load',
        value: function load() {
            // if prices
            if (cartprices = localStorage.getItem('cartprices')) {
                // parse
                this.itemCosts = JSON.parse(cartprices);
                for (var id in this.itemCosts) {
                    var values = this.itemCosts[id];
                    $('.list-entity[data-id="' + id + '"] input.cost').val(values.nq);
                    $('.list-entity[data-id="' + id + '"] input.costhq').val(values.hq);
                }
            }

            // if profits
            if (profits = localStorage.getItem('basketprices')) {
                // parse
                this.itemProfits = JSON.parse(profits);
                for (var id in this.itemProfits) {
                    var values = this.itemProfits[id];
                    $('.item[data-id="' + id + '"] input.final_sale').val(values.finalSale);
                    $('.item[data-id="' + id + '"] input.final_sale_hq').val(values.finalSaleHq);
                    $('.item[data-id="' + id + '"] input.final_quantity').val(values.finalQuantity);
                    $('.item[data-id="' + id + '"] input.final_quantity_hq').val(values.finalQuantityHq);
                }
            }

            CheckoutMath.calculate();
        }

        //
        // Save cart values
        //
    }, {
        key: 'save',
        value: function save() {
            var _this18 = this;

            var $rows = $('.tool-cart-window-all table tr');

            // loop through each rows
            $rows.each(function (i, element) {
                // get row
                var $row = $(element),
                    id = $row.attr('data-id'),
                    nqCost = parseInt($row.find('input.cost').val()),
                    hqCost = parseInt($row.find('input.costhq').val());

                // fix costs
                if (isNaN(nqCost)) nqCost = 0;
                if (isNaN(hqCost)) hqCost = 0;

                // add to list
                _this18.itemCosts[id] = {
                    nq: nqCost,
                    hq: hqCost
                };
            });

            // save to local stoage
            localStorage.removeItem('cartprices');
            localStorage.setItem('cartprices', JSON.stringify(this.itemCosts));
            $('#cartprices').val(JSON.stringify(this.itemCosts));

            // basket
            var $rows = $('.right.tool-basket .item');

            $rows.each(function (i, element) {
                var $row = $(element),
                    id = $row.attr('data-id'),
                    finalSale = parseInt($row.find('input.final_sale').val()),
                    finalSaleHq = parseInt($row.find('input.final_sale_hq').val()),
                    finalQuantity = parseInt($row.find('input.final_quantity').val()),
                    finalQuantityHq = parseInt($row.find('input.final_quantity_hq').val());

                // fix costs
                if (isNaN(finalSale)) finalSale = 0;
                if (isNaN(finalSaleHq)) finalSaleHq = 0;
                if (isNaN(finalQuantity)) finalQuantity = 0;
                if (isNaN(finalQuantityHq)) finalQuantityHq = 0;

                // add to list
                _this18.itemProfits[id] = {
                    finalSale: finalSale,
                    finalSaleHq: finalSaleHq,
                    finalQuantity: finalQuantity,
                    finalQuantityHq: finalQuantityHq
                };
            });

            // save to local stoage
            localStorage.removeItem('basketprices');
            localStorage.setItem('basketprices', JSON.stringify(this.itemProfits));
            $('#basketprices').val(JSON.stringify(this.itemProfits));
        }
    }]);

    return CheckoutStorageClass;
})();

var CheckoutStorage = new CheckoutStorageClass();

//
// Shopping Cart - CheckoutUI
//

var CheckoutUIClass = (function () {
    function CheckoutUIClass() {
        _classCallCheck(this, CheckoutUIClass);

        this.cssListEntity = '.list-entity';
    }

    // Watch for events

    //
    // Toggles the table row, simply just changes
    // the opacity, allows you to "filter out" a
    // sort of todo list
    //

    _createClass(CheckoutUIClass, [{
        key: 'toggleTableRow',
        value: function toggleTableRow(id) {
            var $row = $(this.cssListEntity + '[data-id="' + id + '"]');
            $row.hasClass('toggleoff') ? $row.removeClass('toggleoff') : $row.addClass('toggleoff');
        }

        //
        // Change view
        //
    }, {
        key: 'switchView',
        value: function switchView(id) {
            // remove active
            $('.tool-cart-window.active').removeClass('active');
            $('.right.tool-basket button.active').removeClass('active');

            // add active
            $('.tool-cart-window.tool-cart-window-' + id).addClass('active');
            $('.right.tool-basket button[data-view="' + id + '"]').addClass('active');
        }
    }]);

    return CheckoutUIClass;
})();

var CheckoutUI = new CheckoutUIClass();

//
// Wardrobe Class
//

var WardrobeClass = (function () {
    function WardrobeClass() {
        _classCallCheck(this, WardrobeClass);

        this.cssOpenButton = '[data-tool="wardrobe"]';
        this.cssWardrobePanel = '.tool-wardrobe';
        this.cssSearchLinks = '.search-results a';
        this.cssRemoveItem = '.tlw-remove-button';
        this.cssHqItem = '.tlw-hq-button';
        this.cssCloseMateria = '.tlw-materia-close';
        this.cssCloseMateriaManage = '.tlw-materia-manage-close';
        this.cssAttachMateria = '.tlw-materia-window .tlw-materia-hasitems button';
        this.cssStatsWindowRows = '.tlw-stats-window > div';
        this.cssMateriaIcons = '.tlw-materia';
        this.cssMateriaRemove = '.materia-manage-list button[data-id]';
        this.cssSaveButton = 'button#gs-save-btn';
        this.cssLoadButton = 'button#gs-load-btn';

        this.loadedGearsets = {};
        this.setIsLoading = false;
        this.activeGearset = null;
    }

    // Watch for events

    //
    // Watch for events
    //

    _createClass(WardrobeClass, [{
        key: 'watch',
        value: function watch() {
            var _this19 = this;

            // wardrobe icon clicked, which either opens
            // or closes the tool, based on visibility
            $('html').on('click', this.cssOpenButton, function (event) {
                $(_this19.cssWardrobePanel).hasClass('open') ? WardrobeUI.close() : WardrobeUI.open();
            });

            // listen on search results being clicked, if the wardrobe is open, prevent going
            // to the page as it could of been accidental
            $('html').on('click', this.cssSearchLinks, function (event) {
                if ($(_this19.cssWardrobePanel).hasClass('open')) {
                    event.preventDefault();
                }
            });

            // on clicking remove an item
            $('html').on('click', this.cssRemoveItem, function (event) {
                var slot = $(event.currentTarget).parents('[data-slot]').attr('data-slot');
                WardrobeItems.unequip(slot);
            });

            // on clicking hq an item
            $('html').on('click', this.cssHqItem, function (event) {
                var slot = $(event.currentTarget).parents('[data-slot]').attr('data-slot');
                $(event.currentTarget).toggleClass('enabled');
                WardrobeItems.togglehq(slot);
            });

            // on closing materia window
            $('html').on('click', this.cssCloseMateria, function (event) {
                WardrobeMateria.close();
            });

            // on closing materia manager window
            $('html').on('click', this.cssCloseMateriaManage, function (event) {
                WardrobeMateria.closeManager();
            });

            // on attaching materia to a slot
            $('html').on('click', this.cssAttachMateria, function (event) {
                var slot = $(event.currentTarget).attr('data-materia-slot');
                WardrobeMateria.attach(slot);
            });

            // mouse over an attribute
            $('html').on('mouseover', this.cssStatsWindowRows, function (event) {
                var attrId = $(event.currentTarget).attr('data-id');
                WardrobeStats.highlightStat(attrId);
            });

            // mouse leave an attribute
            $('html').on('mouseout', this.cssStatsWindowRows, function (event) {
                var attrId = $(event.currentTarget).attr('data-id');
                WardrobeStats.highlightStat(attrId, true);
            });

            // clicking materia to manage
            $('html').on('click', this.cssMateriaIcons, function (event) {
                var slot = $(event.currentTarget).parents('div[data-slot]').attr('data-slot');
                WardrobeMateria.showManager(slot);
            });

            // Removing materia
            $('html').on('click', this.cssMateriaRemove, function (event) {
                var id = $(event.currentTarget).attr('data-id'),
                    slot = $(event.currentTarget).attr('data-slot');

                WardrobeMateria.remove(slot, id);
                $(event.currentTarget).parents('.tlw-materia-attached').remove();
            });

            // on clicking the save button
            $('html').on('click', this.cssSaveButton, function (event) {
                $('.tlw-container, .tlw-header').addClass('tlw-blur');
                $('.tlw-save-window').show();
            });

            // close buttons
            $('html').on('click', '#gs-close-btn', function (event) {
                $('.tlw-container, .tlw-header').removeClass('tlw-blur');
                $('.tlw-save-window').hide();$('.tlw-load-window').hide();
            });

            // save gearset
            $('html').on('click', '#saveGearset', function (event) {
                var data = {};

                for (var slot in WardrobeItems.slotToAttributes) {
                    var item = WardrobeItems.slotToAttributes[slot];

                    // assign slot
                    data[slot] = {
                        item: item.item_id,
                        materia: []
                    };

                    // add materia
                    if (item.materia) {
                        for (var i in item.materia) {
                            var attr = item.materia[i];
                            data[slot].materia.push(attr.item_id);
                        }
                    }
                }

                // json stringify
                data = JSON.stringify(data);

                var $response = $('.tlw-response');
                if ($('#gs-name').val().length < 2) {
                    $response.html('Please write a longer name!');
                    return;
                }

                if ($('#gs-desc').val().length < 2) {
                    $response.html('That is a tiny description, expand on it a bit!');
                    return;
                }

                _this19.loading();

                // save
                $.ajax({
                    url: '/gearsets/save',
                    cache: false,
                    data: {
                        json: data,
                        id: $('#gs-saveid').val(),
                        name: $('#gs-name').val(),
                        desc: $('#gs-desc').val(),
                        type: $('#gs-type').val(),
                        classjob: $('#gs-classjob').val()
                    },
                    method: 'POST',
                    success: function success(result) {
                        _this19.load();
                        _this19.loading(true);
                    },
                    error: function error(result) {
                        console.log(result);
                        _this19.loading(true);
                    }
                });
            });

            // load gearset
            $('html').on('click', '.tlw-loaded-gearsets button[data-setid]', function (event) {
                var id = $(event.currentTarget).attr('data-setid');
                var set = _this19.loadedGearsets[id];

                if (set.data.length == 0) {
                    console.log('gs empty');
                    return;
                }

                _this19.activeGearset = set;

                // reset
                _this19.reset();
                _this19.loadingGearset(set.name);

                // load data
                $('#gs-saveid').val(id);
                $('#gs-name').val(set.name);
                $('#gs-desc').val(set.description);
                $('#gs-type').val(set.type);
                $('#gs-classjob').val(set['class'].id);

                // close load window
                $('.tlw-container, .tlw-header').removeClass('tlw-blur');
                $('.tlw-save-window').hide();$('.tlw-load-window').hide();

                // Load the gearset
                WardrobeLoader.load(set.data);
            });

            // on clicking the reset button
            $('html').on('click', '#gs-reset-btn', function (event) {
                _this19.reset();
                _this19.activeGearset = null;
            });

            // on clicking shopping cart button
            $('html').on('click', '#gs-cart-btn', function (event) {
                var items = WardrobeItems.slotToItem;

                // if no items, do nothing
                // TODO : Improve this
                if (Object.size(items) == 0) {
                    return;
                }

                // build id list
                var list = {};
                for (var i in items) {
                    var id = items[i].id;

                    if (list[id]) {
                        list[id] += 1;
                        continue;
                    }

                    list[id] = 1;
                }

                // build string
                var string = [];
                for (var id in list) {
                    var qty = list[id];

                    string.push(id + 'x' + qty);
                }

                // if ids are above 0
                if (string.length > 0) {
                    string = string.join('-');
                    var url = '/shopping-cart/' + string;
                    window.open(url, '_blank');
                }
            });

            // on clicking menu button
            $('html').on('click', '[data-action="gearsets"]', function (event) {
                $('.dropdown-container').hide();
                WardrobeUI.open();
            });
        }

        //
        // Reset!
        //
    }, {
        key: 'reset',
        value: function reset() {
            $('#gs-saveid').val('');
            $('#gs-name').val('');
            $('#gs-desc').val('');
            $('#gs-type').val('');
            $('#gs-classjob').val('');

            WardrobeItems.reset();
            WardrobeStats.reset();
            WardrobeMateria.reset();

            $('.tlw-slots').each(function (i, element) {
                $(element).find('.tlw-remove-button, .tlw-hq-button').removeClass('active');
                $(element).find('.tlw-slot').html('').attr('data-equipped', 0);
                $(element).find('.tlw-materia').removeClass('active');
                $(element).find('.tlw-materia span').removeClass('active').css({ 'background-image': 'none' }).removeAttr('data-tt').removeAttr('data-materia-id');
            });

            // Generate new stats
            WardrobeStats.build();
        }

        //
        // Is wardrobe open?
        //
    }, {
        key: 'isOpen',
        value: function isOpen() {
            return $(this.cssWardrobePanel).hasClass('open');
        }

        //
        // Load gearsets
        //
    }, {
        key: 'load',
        value: function load() {
            var _this20 = this;

            // only load gearsets when on app
            if (APP != 'app') {
                return;
            }

            var $loaded = $('.tlw-loaded-gearsets');
            $loaded.html('');

            this.loading();

            // save
            $.ajax({
                url: '/gearsets/load',
                cache: false,
                success: function success(results) {
                    _this20.loading(true);

                    if (results) {
                        for (var i in results) {
                            var set = results[i];
                            _this20.loadedGearsets[set.id] = set;
                            $loaded.append('\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<button data-setid="' + set.id + '">\n\t\t\t\t\t\t\t\t\t<img src="/img/classes/set2/' + set['class'].icon + '.png" height="20">\n\t\t\t\t\t\t\t\t\t' + set.name + '\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t');
                        }
                    }
                },
                error: function error(result) {
                    console.log(result);
                }
            });
        }

        //
        // Toggle loading
        //
    }, {
        key: 'loading',
        value: function loading(hide) {
            if (this.setIsLoading) {
                return;
            }

            if (hide) {
                $('.tlw-loading').hide();
                return;
            }

            $('.tlw-loading').show();
        }

        //
        // Toggle loading set
        //
    }, {
        key: 'loadingGearset',
        value: function loadingGearset(name) {
            if (!name) {
                $('.tlw-loading-set').hide();
                this.setIsLoading = false;
                return;
            }

            this.setIsLoading = true;
            $('.tlw-loading-set').find('em').html(name);
            $('.tlw-loading-set').show();
        }
    }]);

    return WardrobeClass;
})();

var Wardrobe = new WardrobeClass();
$(function () {
    Wardrobe.watch();
    Wardrobe.load();
});

//
// Shopping Cart UI
//

var WardrobeAPIClass = (function () {
    function WardrobeAPIClass() {
        _classCallCheck(this, WardrobeAPIClass);
    }

    // Watch for events

    _createClass(WardrobeAPIClass, [{
        key: 'getItem',

        //
        // Get an item from the API
        //
        value: function getItem(id, callback) {
            $.ajax({
                url: API_URL + '/item/' + id,
                cache: false,
                success: function success(data) {
                    callback(data);
                },
                error: function error(data) {
                    console.error(data);
                }
            });
        }
    }]);

    return WardrobeAPIClass;
})();

var WardrobeAPI = new WardrobeAPIClass();

//
// Wardrobe Items
//

var WardrobeItemsClass = (function () {
    function WardrobeItemsClass() {
        _classCallCheck(this, WardrobeItemsClass);

        this.slotToItem = {};
        this.slotToAttributes = {};
        this.slotToMateriaCount = {};
        this.slotToName = {};

        // css elements
        this.cssDropZone = '.tool-wardrobe-items';

        //
        // slots link based on: slot_equip
        //
        this.mainHandSlots = [1];
        this.offHandSlots = [2];
        this.soulSlots = [13];
        this.gearSlots = [3, 4, 5, 6, 7, 8, 9, 10, 11, 121, 122, 13];

        //
        // slots link based on: item_ui_category
        //
        this.medicineSlots = [44];
        this.foodSlots = [46, 47];
        this.materiaSlots = [58];
    }

    //
    // Reset
    //

    _createClass(WardrobeItemsClass, [{
        key: 'reset',
        value: function reset() {
            this.slotToItem = {};
            this.slotToAttributes = {};
            this.slotToMateriaCount = {};
            this.slotToName = {};
        }

        //
        // Add an item to the wardrobe
        //
    }, {
        key: 'add',
        value: function add(itemId, callback) {
            var _this21 = this;

            Wardrobe.loading();

            // hide dropzone title
            $(this.cssDropZone).find('em').hide();

            // get item data
            WardrobeAPI.getItem(itemId, function (data) {
                Wardrobe.loading(true);

                if (callback) {
                    callback(data);
                }

                // if item doesn't have a slot, pass it on and skip
                if (data.slot_equip == 0) {
                    _this21.addExtra(data);
                    return;
                }

                // If item is materia, we need to handle it differently
                if (data.slot_equip == 16) {
                    WardrobeMateria.add(data);
                    return;
                }

                // If its a ring, modify the slot based on which ring is
                // empty, if the left one is empty, its slot 121, otherwise
                // set it to 122, it will always overwrite 122 until 121 is empty
                if (data.slot_equip == 12) {
                    data.slot_equip = $('.tlw-slots div[data-slot="121"] .tlw-slot').attr('data-equipped') == 0 ? 121 : 122;
                }

                // set slot name
                _this21.slotToName[data.slot_equip] = data.slot_name;

                // add to object
                _this21.slotToItem[data.slot_equip] = data;

                // initialize new slot stat
                _this21.slotToAttributes[data.slot_equip] = {
                    item_id: data.id,
                    name: data.name,
                    icon: data.icon,
                    slot: data.slot_equip,
                    level_equip: data.level_equip,
                    level_item: data.level_item,
                    materia_count: data.materia_slot_count,
                    is_hq: false,
                    stats: [],
                    materia: {}
                };

                // Build base stats, doing manuallish as its a single array mixing hq/nq
                //
                // DPS is specifically ignored because it will be misrepresented based on
                // all other stats included.
                var baseParams = ['damage', 'magic_damage', 'defense', 'magic_defense', 'block_strength', 'block_rate', 'auto_attack', 'delay'];

                // Build stats from base parameters
                for (var i in baseParams) {
                    var key = baseParams[i],
                        value = data.attributes_base[key],
                        value_hq = data.attributes_base[key + '_hq'];

                    if (value > 0) {
                        _this21.slotToAttributes[data.slot_equip].stats.push({
                            id: key,
                            name: _this21.getBaseAttributeName(key),
                            value: value,
                            value_hq: value_hq
                        });
                    }
                }

                // Build stats from attribute parameters
                for (var i in data.attributes_params) {
                    var param = data.attributes_params[i];

                    if (param.value > 0) {
                        _this21.slotToAttributes[data.slot_equip].stats.push({
                            id: param.id,
                            name: param.name,
                            value: param.value,
                            value_hq: param.value_hq
                        });
                    }
                }

                // equip item
                _this21.equip(data);

                // add materia if any
                _this21.activateMateriaSlots(data.materia_slot_count, data.slot_equip);
                _this21.slotToMateriaCount[data.slot_equip] = data.materia_slot_count;

                // Build gear
                WardrobeStats.build();
            });
        }

        //
        // Handle extras, such as medcine, materia, etc
        //
    }, {
        key: 'addExtra',
        value: function addExtra(item) {}
        //console.log(item);

        //
        // Convert placeholder to translation
        //

    }, {
        key: 'getBaseAttributeName',
        value: function getBaseAttributeName(key) {
            var data = {
                'damage': languages.params(12),
                'magic_damage': languages.params(13),
                'defense': languages.params(21),
                'magic_defense': languages.params(24),
                'block_strength': languages.params(18),
                'block_rate': languages.params(17),
                'auto_attack': languages.params(20),
                'dps': languages.custom(329),
                'delay': languages.params(14)
            };

            return data[key];
        }

        //
        // Equip item
        //
    }, {
        key: 'equip',
        value: function equip(item) {
            // get slot
            var $slot = $('.tlw-slots div[data-slot="' + item.slot_equip + '"]');

            // add icon
            $slot.find('.tlw-slot').html('<img src="' + item.icon + '" data-tooltip-id="item/' + item.id + '" data-xivdb-replace="1">').attr('data-equipped', 1);

            // enable delete button
            $slot.find('.tlw-remove-button').addClass('active');

            // if it can be hq'd, enable HQ button
            if (typeof item.attributes_params[0] != 'undefined') {
                var nqValue = item.attributes_params[0].value,
                    hqValue = item.attributes_params[0].value_hq;

                if (hqValue > 0 && nqValue != hqValue) {
                    $slot.find('.tlw-hq-button').addClass('active');
                }
            }

            XIVDBTooltips.get();
        }

        //
        // Remove an item
        //
    }, {
        key: 'unequip',
        value: function unequip(slot) {
            var $slot = $('.tlw-slots div[data-slot="' + slot + '"]');

            // remove all materia
            $slot.find('.tlw-materia span[data-materia-id]').each(function (i, element) {
                WardrobeMateria.remove(slot, $(element).attr('data-materia-id'));
            });

            // delete slots
            delete this.slotToItem[slot];
            delete this.slotToAttributes[slot];

            // get slot
            $slot.find('.tlw-slot img').remove();
            $slot.find('.tlw-slot').attr('data-equipped', 0);
            $slot.find('.tlw-remove-button').removeClass('active');
            $slot.find('.tlw-hq-button').removeClass('active');
            $slot.find('.tlw-materia').removeClass('active');
            $slot.find('.tlw-materia span').removeClass('active');

            // Build gear
            WardrobeStats.build();

            // drop tooltips
            ttdrop();
        }

        //
        // Toggle HQ items
        //
    }, {
        key: 'togglehq',
        value: function togglehq(slot) {
            this.slotToAttributes[slot].is_hq = !this.slotToAttributes[slot].is_hq;
            WardrobeStats.build();
        }

        //
        // Attach materia
        //
    }, {
        key: 'activateMateriaSlots',
        value: function activateMateriaSlots(count, slot) {
            var $materia = $('.tlw-slots div[data-slot="' + slot + '"] .tlw-materia');

            // remove active states
            $materia.removeClass('active');
            $materia.find('> span').removeClass('active');

            // if materia, make active!
            if (count > 0) {
                // set the materia window active
                $materia.addClass('active');

                // add materia slots
                for (var i = 1; i <= count; i++) {
                    $materia.find('[data-materia="' + i + '"]').addClass('active');
                }
            }
        }
    }]);

    return WardrobeItemsClass;
})();

var WardrobeItems = new WardrobeItemsClass();

//
// Load gearset
//

var WardrobeLoaderClass = (function () {
    function WardrobeLoaderClass() {
        _classCallCheck(this, WardrobeLoaderClass);

        this.reset();
    }

    //
    // Reset
    //

    _createClass(WardrobeLoaderClass, [{
        key: 'reset',
        value: function reset() {
            this.itemsTotal = 0;
            this.itemsLoaded = 0;
            this.materiaTotal = 0;
            this.materiaLoaded = 0;
            this.hasMateria = false;
        }
    }, {
        key: 'load',
        value: function load(gear) {
            // reset
            this.reset();

            // set total items
            this.itemsTotal = Object.size(gear);

            // add items
            for (var slot in gear) {
                this.addItem(slot, gear[slot]);
            }
        }

        //
        // Has complete?
        //
    }, {
        key: 'hasComplete',
        value: function hasComplete() {
            if (this.hasLoaded) {
                Wardrobe.loadingGearset();
            }
        }

        //
        // Add an item
        //
    }, {
        key: 'addItem',
        value: function addItem(slot, data) {
            var _this22 = this;

            // add item
            WardrobeItems.add(data.item, function (item) {
                _this22.itemsLoaded++;

                // if materia, add that
                if (data.materia) {
                    _this22.addMateria(slot, data.materia);
                }

                if (!_this22.hasMateria && _this22.itemsLoaded >= _this22.itemsTotal) {
                    _this22.hasLoaded = true;
                    _this22.hasComplete();
                }
            });
        }

        //
        // Add materia
        //
    }, {
        key: 'addMateria',
        value: function addMateria(slot, materia) {
            var _this23 = this;

            if (materia.length < 1) {
                return;
            }

            // materia exists
            this.hasMateria = true;
            this.hasLoaded = false;
            this.materiaTotal += materia.length;

            // loop through materia
            for (var i in materia) {
                var id = materia[i];

                WardrobeAPI.getItem(id, function (item) {
                    ;
                    WardrobeMateria.setActive(item).attach(slot);
                    _this23.materiaLoaded++;

                    if (_this23.materiaLoaded >= _this23.materiaTotal) {
                        _this23.hasLoaded = true;
                        _this23.hasComplete();
                    }
                });
            }
        }
    }]);

    return WardrobeLoaderClass;
})();

var WardrobeLoader = new WardrobeLoaderClass();

//
// Wardrobe Materia
//

var WardrobeMateriaClass = (function () {
    function WardrobeMateriaClass() {
        _classCallCheck(this, WardrobeMateriaClass);

        this.slotToMateria = {};
        this.activeMateria = null;
    }

    //
    // Reset
    //

    _createClass(WardrobeMateriaClass, [{
        key: 'reset',
        value: function reset() {
            this.slotToMateria = {};
            this.activeMateria = null;
        }

        //
        // Open materia window
        //
    }, {
        key: 'open',
        value: function open() {
            $('.tlw-materia-window').show();
            $('.tlw-container').addClass('tlw-blur');
        }

        //
        // Close materia window
        //
    }, {
        key: 'close',
        value: function close() {
            $('.tlw-materia-window').hide();
            $('.tlw-container').removeClass('tlw-blur');
        }

        //
        // Set the current active materia
        //
    }, {
        key: 'setActive',
        value: function setActive(materia) {
            this.activeMateria = materia;
            return this;
        }

        //
        // Add materia to an item
        //
    }, {
        key: 'add',
        value: function add(materia) {
            // Set active materia
            this.activeMateria = materia;

            // Set preview
            var $preview = $('.tlw-materia-preview'),
                param = materia.attributes_params[0];
            $preview.find('> div:nth-child(1)').html('<img src="' + materia.icon + '" height="24" width="24">');
            $preview.find('> div:nth-child(2)').html(materia.name);
            $preview.find('> div:nth-child(3)').html('<em>+' + param.value + '</em> ' + param.name);

            // show number of items with materia
            var $itemSection = $('.tlw-materia-items');
            $itemSection.html('');

            // go through slots
            var hasSlots = false;
            for (var slot in WardrobeItems.slotToMateriaCount) {
                var count = WardrobeItems.slotToMateriaCount[slot];

                // if this slot has materia count
                if (count > 0) {
                    hasSlots = true;

                    // get slot item and name
                    var slotItem = WardrobeItems.slotToItem[slot],
                        slotName = WardrobeItems.slotToName[slot];

                    $itemSection.append('\n\t\t\t\t\t<button data-materia-slot="' + slot + '">\n\t\t\t\t\t\t<div>' + slotName + '</div>\n\t\t\t\t\t\t<img src="' + slotItem.icon + '" height="42" width="42">\n\t\t\t\t\t</button>\n\t\t\t\t');
                }
            }

            // if slots, show slots, otherwise show no slot message
            if (hasSlots) {
                $('.tlw-materia-hasitems').show();
                $('.tlw-materia-noitems').hide();
            } else {
                $('.tlw-materia-hasitems').hide();
                $('.tlw-materia-noitems').show();
            }

            // Open materia window
            this.open();
        }

        //
        // Attach the current active materia to a slot
        //
    }, {
        key: 'attach',
        value: function attach(slot) {
            var materia = this.activeMateria,
                attrSlot = WardrobeItems.slotToAttributes[slot],
                materiaCount = Object.size(attrSlot.materia),
                materiaSlotIndex = materiaCount + 1,
                materiaSlotIndexAutoSet = false;

            // Find an empty slot
            $('div[data-slot="' + slot + '"] .tlw-materia span.active').each(function (i, element) {
                if (!materiaSlotIndexAutoSet && !$(element).attr('data-materia-id')) {
                    materiaSlotIndexAutoSet = true;
                    materiaSlotIndex = $(element).attr('data-materia');
                    return;
                }
            });

            // if the maximum number of materia added,
            // remove the last one
            if (materiaCount >= attrSlot.materia_count) {
                // remove the last entry
                var idToDelete = Object.getLastKey(attrSlot.materia);
                this.remove(slot, idToDelete);

                // reduce slot index
                materiaSlotIndex--;
            }

            // materia id
            var id = generateRandomHash(8),
                materiaData = {
                id: id,
                item_id: materia.id,
                name: materia.name,
                icon: materia.icon,
                stats: []
            };

            // Add materia to item
            WardrobeItems.slotToAttributes[slot].materia[id] = materiaData;

            // assign slot to materia
            if (!this.slotToMateria[slot]) {
                this.slotToMateria[slot] = {};
            }
            this.slotToMateria[slot][id] = materiaData;

            // Add materia stats
            for (var i in materia.attributes_params) {
                var param = materia.attributes_params[i];

                if (param.value > 0) {
                    WardrobeItems.slotToAttributes[slot].materia[id].stats.push({
                        id: param.id,
                        name: param.name,
                        value: param.value,
                        value_hq: param.value_hq
                    });
                }
            }

            // update slot display
            var $slot = $('div[data-slot="' + slot + '"] .tlw-materia span[data-materia="' + materiaSlotIndex + '"]');
            $slot.css({ 'background-image': 'url(' + materia.icon + ')' }).attr('data-tt', '(' + materia.name + ') &nbsp; +' + materia.attributes_params[0].value + ' ' + materia.attributes_params[0].name).attr('data-materia-id', id);

            // close materia window
            this.close();

            // Generate new stats
            WardrobeStats.build();
        }

        //
        // Remove some materia
        //
    }, {
        key: 'remove',
        value: function remove(slot, id) {
            // update slot display
            var $slot = $('div[data-slot="' + slot + '"] .tlw-materia span[data-materia-id="' + id + '"]');
            $slot.css({ 'background-image': 'none' }).removeAttr('data-tt').removeAttr('data-materia-id');

            // delete materia
            delete WardrobeItems.slotToAttributes[slot].materia[id];
            delete this.slotToMateria[slot][id];

            // Generate new stats
            WardrobeStats.build();
        }

        //
        // Show the materia manage
        //
    }, {
        key: 'showManager',
        value: function showManager(slot) {
            $('.tlw-materia-manage').show();
            $('.tlw-container').addClass('tlw-blur');

            // get materia
            var materia = this.slotToMateria[slot];

            // if materia, show list, otherwise show error
            if (materia) {
                $('.tlw-materia-manage-hasitems').show();
                $('.tlw-materia-manage-noitems').hide();

                var $list = $('.materia-manage-list');
                $list.html('');

                for (var i in materia) {
                    var mat = materia[i];

                    $list.append('\n\t\t\t\t\t<div class="tlw-materia-attached">\n\t\t\t\t\t\t<div><img src="' + mat.icon + '" width="24" height="24"></div>\n\t\t\t\t\t\t<div>' + mat.name + '</div>\n\t\t\t\t\t\t<div><em>+' + mat.stats[0].value + '</em> ' + mat.stats[0].name + '</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<button class="red small" data-slot="' + slot + '" data-id="' + mat.id + '">' + languages.custom(330) + '</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t');
                }
            } else {
                $('.tlw-materia-manage-noitems').show();
                $('.tlw-materia-manage-hasitems').hide();
            }
        }

        //
        // Close the materia manager
        //
    }, {
        key: 'closeManager',
        value: function closeManager() {
            $('.tlw-materia-manage').hide();
            $('.tlw-container').removeClass('tlw-blur');
        }
    }]);

    return WardrobeMateriaClass;
})();

var WardrobeMateria = new WardrobeMateriaClass();

//
// Wardrobe Stats
//

var WardrobeStatsClass = (function () {
    function WardrobeStatsClass() {
        _classCallCheck(this, WardrobeStatsClass);

        this.stats = {};
        this.statsToSlot = {};
        this.statsToName = {};
        this.slotToStats = {};
        this.highestStat = 0;
    }

    //
    // Reset
    //

    _createClass(WardrobeStatsClass, [{
        key: 'reset',
        value: function reset() {
            this.stats = {};
            this.statsToSlot = {};
            this.statsToName = {};
            this.slotToStats = {};
            this.highestStat = 0;
        }

        //
        // Build stats
        //
    }, {
        key: 'build',
        value: function build() {
            this.reset();

            // get slot items
            var slotItems = WardrobeItems.slotToAttributes;

            // build stats
            for (var slot in slotItems) {
                var data = slotItems[slot];
                this.slotToStats[slot] = [];

                // add up stats
                for (var i in data.stats) {
                    var attr = data.stats[i];

                    // Add stat
                    this.addStat(slot, attr, data.is_hq);
                }

                // is there materia?
                if (data.materia) {
                    // loop through attached materia
                    for (var j in data.materia) {
                        // add up stats
                        for (var i in data.materia[j].stats) {
                            var attr = data.materia[j].stats[i];
                            this.addStat(slot, attr, data.is_hq);
                        }
                    }
                }
            }

            // order stats
            this.stats = sortIt(this.stats);
            this.printStats();
        }

        //
        // Add a stat from an attribute
        //
    }, {
        key: 'addStat',
        value: function addStat(slot, attr, isHq) {
            // add to slot
            if (!this.statsToSlot[attr.id]) {
                this.statsToSlot[attr.id] = [];
            }

            // add attribute
            this.statsToSlot[attr.id].push(slot);

            // assign stats to its name counterpart
            this.statsToName[attr.id] = attr.name;

            // add to list of slots
            this.slotToStats[slot].push(attr.name);

            // set values based on if this is stored before or not
            if (this.stats[attr.id]) {
                this.stats[attr.id] = this.stats[attr.id] + (isHq ? attr.value_hq : attr.value);
            } else {
                this.stats[attr.id] = isHq ? attr.value_hq : attr.value;
            }

            if (this.stats[attr.id] > this.highestStat) {
                this.highestStat = this.stats[attr.id];
            }
        }

        //
        // Print the stats
        //
    }, {
        key: 'printStats',
        value: function printStats() {
            var $window = $('.tlw-stats-window');
            $window.html('');

            var speed = 150;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.stats.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _step$value = _slicedToArray(_step.value, 2);

                    var i = _step$value[0];
                    var stat = _step$value[1];

                    var id = stat[0],
                        value = parseInt(stat[1]),
                        name = this.statsToName[id],
                        percent = value / this.highestStat * 100;

                    $window.append('\n\t\t\t\t<div class="tlw-stats-line" data-id="' + id + '">\n\t\t\t\t\t<div class="tlw-stats-values">\n\t\t\t\t\t\t<em>' + value + '</em> ' + name + '\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="tlw-stats-graph">\n\t\t\t\t\t\t<span style="width:' + percent + '%"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t');

                    $window.find('[data-id="' + id + '"]').stop(true, true).animate({
                        opacity: 1,
                        left: 0
                    }, speed * i);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        //
        // Highlight which slots have this stat
        //
    }, {
        key: 'highlightStat',
        value: function highlightStat(attrId, removeHighlight) {
            for (var i in this.statsToSlot[attrId]) {
                var slot = this.statsToSlot[attrId][i],
                    $slot = $('.tlw-slots-icons > div[data-slot="' + slot + '"]');

                removeHighlight ? $slot.removeClass('highlight') : $slot.addClass('highlight');
            }
        }
    }]);

    return WardrobeStatsClass;
})();

var WardrobeStats = new WardrobeStatsClass();

//
// Wardrobe UI
//

var WardrobeUIClass = (function () {
    function WardrobeUIClass() {
        _classCallCheck(this, WardrobeUIClass);

        this.cssOpenButton = '[data-tool="wardrobe"]';
        this.cssWardrobePanel = '.tool-wardrobe';
        this.cssDraggableIcons = '.search-results .search-results-group-items .entity';
        this.cssDropZone = '.tool-wardrobe';
        this.isOpen = false;
    }

    // init

    //
    // Open wardrobe tool
    //

    _createClass(WardrobeUIClass, [{
        key: 'open',
        value: function open() {
            // hide all open panels
            SearchUI.hideAllActivePanels('wardrobe');

            // set as open
            this.isOpen = true;
            this.setIconsDraggable();
            $(this.cssWardrobePanel).addClass('open');
            $(this.cssOpenButton).addClass('enabled');

            // make wardrobe panel droppable
            $(this.cssDropZone).droppable({
                accept: this.cssDraggableIcons,
                activeClass: 'tool-wardrobe-dropzone-active',
                hoverClass: 'tool-wardrobe-dropzone-hover',
                drop: function drop(event, ui) {
                    var $droppedItem = $(ui.draggable);
                    WardrobeItems.add($droppedItem.attr('data-id'));
                }
            });

            // Set search
            if (Search.theone != 'items') {
                Search.setOne('items').setPage(1);
            }

            Search.setString().runQuery();
            SearchUI.updateStickyNav();
        }

        //
        // Close wardrobe tool
        //
    }, {
        key: 'close',
        value: function close() {
            if (this.isOpen) {
                this.isOpen = false;
                $(this.cssWardrobePanel).removeClass('open');
                $(this.cssOpenButton).removeClass('enabled');
                $(this.cssDraggableIcons).removeClass('wardrobe-draggable').draggable('destroy');
            }
        }

        //
        // Attach draggable
        //
    }, {
        key: 'setIconsDraggable',
        value: function setIconsDraggable() {
            // make icons draggable
            $(this.cssDraggableIcons).addClass('wardrobe-draggable').draggable({
                containment: 'html',
                revert: true,
                revertDuration: 0,
                start: function start() {
                    ttdrop();

                    if (typeof XIVDBTooltips !== 'undefined') {
                        XIVDBTooltips.hide();
                    }
                }
            });
        }
    }]);

    return WardrobeUIClass;
})();

var WardrobeUI = new WardrobeUIClass();